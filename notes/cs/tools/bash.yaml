topic: Bash
deck: All::CS::Tools::Bash
uid_tag: bash
notes:
-       guid: AQ|OgY$Xq~
        front: Redo last command
        back: '`!!`'
        include_reverse: true
-       guid: o*JH:+=mjy
        front: Redo second-to-last command
        back: '`!2`'
        include_reverse: true
-       guid: m8#0z]Wc>`
        front: Last argument of last command
        back: '`!$`'
        include_reverse: true
-       guid: HG.9vG6#0F
        front: Redo last command as root
        back: '`sudo !!`'
        include_reverse: true
-       guid: Bu}54gSjy_
        front: Edit last command's argument in `vim`
        back: '`vim !!:1`'
        include_reverse: true
-       guid: uvS{6)WAm@
        front: Send job to background
        back: C-z
        include_reverse: true
-       guid: vEAt[aT#|H
        front: Bring back backgrounded job
        back: '`fg`'
        include_reverse: true
-       guid: o&iccR@:SB
        front: Collapse whitespace in output of program into one space
        back: |
                `echo $(some program)`
        include_reverse: true
-       guid: o/O&T!+NNO
        front: |
                Difference in `source` behavior between `bash` and `sh`
        back: |
                <ul>
                <li> `sh`: `source` searches in `$PATH`
                <li> `bash`: it also searches in `$CWD`
                </ul>
-       guid: ksJ8-~TpUT
        front: Use program input/output pipes as file paths
        back: |
                `wc -l <(cat x.txt);
                ./someprog --output-file >(./process-somehow)`
        include_reverse: true
-       guid: oE&HDDqZvS
        front: Print out every executed command
        back: '`set -x`'
        include_reverse: true
-       guid: y]G=QyVQBV
        front: Figure which type of command something is
        back: '`type something`'
        include_reverse: true
-       guid: MDi]=roB|>
        front: How to iterate on files containing whitespace in a for loop?
        back: |
                `IFS=$'\n'`
-       guid: Lv_Hg(ziG0
        front: Detect unset variable usages
        back: '`set -u`'
        include_reverse: true
-       guid: gZ)k.rR)JS
        front: Usage of `trap` to echo when script fails with error
        back: |
                `trap "echo 'Script failed'" ERR`
-       guid: lXF}B#FM3H
        front: Separate subshell, isolating current directory
        back: |
                `(cd /some/dir && other-command)`
        include_reverse: true
-       guid: vG~9ajR,ZW
        front: Get value of variable, or error out with 'something' if it's empty
        back: '`${name:?something}`'
        include_reverse: true
-       guid: q[e8hC$S4Z
        include_reverse: true
        front: Get value of variable, or use a default value of 'something'
        back: '`${name:-something}`'
-       guid: H$]GdF#woF
        front: Arithmetic variable expansion
        include_reverse: true
        back: '`$(( (i + 1) % 5 ))`'
-       guid: hff~md88[X
        include_reverse: true
        front: Trim suffix of `something` from `$var`
        back: |
                `${name%something}`
-       guid: zR1Uh(]OZP
        front: Trim prefix of `something` from `$var`
        include_reverse: true
        back: |
                `${name#something}`
-       guid: sDm?v/(NNp
        front: Sequence `1` to `100`, without `seq`
        back: '`{1..100}`'
        include_reverse: true
-       guid: PBCSPC$/bL
        front: |
                Prevent partially downloaded scripts from executing
                (due to syntax error)
        markdown: false
        back: |
                <code>{<br>code code code ...<br>}</code>
-       guid: emm5x1~=vc
        front: Redirect both stdout and stderr to `file`
        back: |
                "`command >file 2>&1` or `command &>file`"
-       guid: cOE9nf~mIX
        front: Literal tab
        markdown: false
        back: |
                <code>$'\t'</code>
