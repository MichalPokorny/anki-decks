topic: C
deck: CS::Languages::C
uid_tag: cs/languages/c
notes:
        -
                uuid: 225318ea-ab7c-40a0-9ef8-cfdb6f12d963
                front: "`freopen`"
                back: "`FILE* freopen(const char *path, const char *mode, FILE *stream);` - e.g. `freopen(\"soubor.in:\", \"r\", stdin);`"
        -
                uuid: 9571b5f1-8784-4da8-b045-87f075a06e80
                front: "`erf`"
                back: Gauss distribution error function
                include_reverse: true
        -
                uuid: 5c75c7e5-136d-400f-b46b-0c28ced1ef5f
                front: "`free` behavior on `NULL`"
                back: OK. If `ptr` is `NULL`, no operation is performed.
        -
                uuid: f14bead7-c952-46f7-a719-081fc576adea
                front: GCC - destroy some identifier(s) forever
                back: "`#pragma GCC poison (identifiers)`"
                include_reverse: true
        -
                uuid: 96c6d7a7-28dd-4ca4-8beb-33b064697729
                front: GCC - warn on misleading indentation
                back: "`gcc -Wmisleading-intentation`"
                include_reverse: true
        -
                uuid: be5643b2-4dc9-4a78-a704-0247a081f646
                front: No-return header
                back: "`#include <stdnoreturn.h>`; provides `noreturn` macro."
        -
                uuid: fcfdf4e1-4df9-4f1e-ab04-dc01f5f68626
                front: Shortest crashing C program
                back: "`main;` (from `int main = 0;` ==> `main=0;` ==> `main;`)"
        -
                uuid: fa5c375e-e697-4511-bb80-8ef3c5cc2072
                topic: "C - `printf`"
                front: "Align to left (print '42  ')"
                back: '`printf("%-4d\n", 42);'
                include_reverse: true
        -
                uuid: cf13970d-e91a-4902-9749-aa3150d3c09b
                topic: "C - `printf`"
                front: "Print number with sign, + or - (print '+42')"
                back: '`printf("%+d\n", 42);'
                include_reverse: true
        -
                uuid: cec698e8-7ad2-4403-8483-732eeedff415
                topic: "C - `printf`"
                front: "Print number with -, or space for positives (print ' 42')"
                back: '`printf("% d\n", 42);'
                include_reverse: true
        -
                uuid: 045dfdd5-d388-49be-9c1d-d9c273fb855d
                topic: "C - `printf`"
                front: "Print float in hexadecimal form (`0x1.91eb86p+1`)"
                back: '`printf("pi=%a\n", 3.14);'
                include_reverse: true
        -
                uuid: 5f76b470-81f4-4583-9885-4a9c70a34c7b
                topic: "C - `printf`"
                front: "Print out `0x1a`, without `0x` in format string"
                back: '`printf("%#X\n", 26);'
                include_reverse: true
                # TODO: also works for octal
        -
                uuid: 78a17c8f-f85c-4259-9984-db789c5226ec
                front: "`calloc`"
                back: '`void *calloc(size_t nmemb, size_t size);`; allocates memory, like `malloc`'
        -
                uuid: a4889ec5-e7da-426d-b30d-6fa603ca9369
                front: "Dynamically allocate heap memory for an array"
                back: '`void *calloc(size_t nmemb, size_t size);`; allocates memory, like `malloc`'
        -
                uuid: dbbf9846-47ad-41ed-be45-5d80d95d152c
                front: "`realloc`"
                back: '`void *realloc(void *ptr, size_t size);`; returns `NULL` on failure; `ptr` may be `NULL`'
        -
                uuid: 8043cfc6-53c9-4e64-b218-190972f45b35
                front: "`asprintf`"
                back: >
                        Allocate large enough string and sprintf into it.
                        `int asprintf(char **strp, const char *fmt, ...);`;
                        `*strp` should be `free`'d. Returns number of bytes printed, or -1 on error.
        -
                uuid: 2a95993b-127a-43f2-85f8-d2e4db5c6031
                front: Allocate large enough string and sprintf into it
                back: >
                        `asprintf`
                        `int asprintf(char **strp, const char *fmt, ...);`;
                        `*strp` should be `free`'d. Returns number of bytes printed, or -1 on error.
        -
                uuid: 5cdd8d57-3c25-4ed5-bf3c-657765c1d978
                front: 'What does `puts("hello");` do?'
                back: "Writes `hello` and a newline to `stdout`."
        -
                uuid: a55e3141-8c90-4818-9fe0-60e3291fb678
                front: 'What to do with continuation markers in multi-line macro bodies?'
                back: "Right-align them"
        -
                uuid: 6c110fe4-7a9a-4224-b339-c00e6d861323
                front: '`reallocarray` and why to use it'
                back: "`void* reallocarray(void *ptr, size_t nmemb, size_t size);` -- use because `num * size` in `malloc`/`realloc` call might lead to overflow"
        -
                uuid: ef449a86-449d-4792-bccc-4a632666b326
                front: "Zero out memory without allowing de-optimizing it away (e.g., for passwords)"
                back: "`void explicit_bzero(void *buf, size_t len);`"
        -
                uuid: d32ea83d-9075-4db1-aedb-3401655af5d6
                front: "`explicit_bzero`"
                back: >
                        Zero out memory without allowing de-optimizing it away (e.g., for passwords).
                        `void explicit_bzero(void *buf, size_t len);`
