topic: Java
deck: All::CS::Languages::Java
notes:
-       guid: kk_5@4|g=v
        front: Join `List<String>` by `", "`
        back: '`list.stream().collect(Collectors.joining(", "))`'
        include_reverse: true
-       guid: d9}7+=qg$Q
        front: Call map function on `List<String>` to convert to integers, then sum
                up results
        back: '`list.stream().mapToLong(fn).sum()`'
        include_reverse: true
-       guid: h2<Mn2s%r#
        front: Group `List<X>` by result of `fn`, yielding `Map<X, List<Y>>`
        back: '`list.stream().collect(Collectors.groupingBy(fn))`'
        include_reverse: true
-       guid: saVLnAY?#c
        front: Convert from `List<X>` to `List<Y>` through `fn`
        back: '`list.stream().map(fn).collect(Collectors.toList())`'
        include_reverse: true
-       guid: P>,uf)-i6^
        front: Class of pair / map entry
        back: '`Map.Entry<K, V>`'
        include_reverse: true
-       guid: DI9*R)^%=)
        front: Get list sublist of items [5;10)
        back: '`list.subList(5, 10);`'
        include_reverse: true
-       guid: FSVp>NM@V+
        front: Write stack trace of exception to stdout
        back: '`exception.printStackTrace();`'
-       guid: ok+ca-t46?
        front: Set `Set<T> s1` to the intersection of `s1` and `s2`
        back: '`s1.retainAll(s2);`'
-       guid: t:/UWrVbsZ
        front: Set `Set<T> s1` to the `s1` set-minus `s2`
        back: '`s1.removeAll(s2);`'
-       guid: Li4}))Ri7J
        front: Convert list to set using stream
        back: '`list.stream().collect(Collectors.toSet())`'
