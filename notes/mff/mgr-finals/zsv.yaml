deck: All::Magisterské státnice::Základy složitosti a vyčíslitelnosti
notes:
-       guid: Ojr)Ek))!O
        front: Kdy je problém A převoditelný na B?
        back: |
                Když jde instance A převést na instanci B
                <i>se stejnou odpovědí ano/ne</i>.
-       guid: w)<ig0OG+o
        front: Church-Turingova teze
        back: |
                Ke každému algoritmu v intuitivním smyslu (konečná
                posloupnost jednoduchých instrukcí vedoucí k řešení
                úlohy) existuje ekvivalentní Turingův stroj.
-       guid: hl+Ol?S>YY
        topic: Turingův stroj
        front: |
                Definice: Displej
        back: |
                [$] (q,a) [/$]: stav a symbol pod hlavou.
-       guid: vV_Jw>Kgy-
        topic: Turingův stroj
        front: |
                Definice: Konfigurace
        back: |
                Stav řídící jednotky, slovo na pásce (neprázdné),
                pozice hlavy
-       guid: yx8(mN=^2j
        front: |
                Definice Turingova stroje, dále: Jaká je páska?
                Jak se hýbe hlava? Co hlava umí?
        back: |
                [$]M = (Q, \\Sigma, \\delta, q_0, F)[/$].<br>
                [$]Q[/$]: stavy, [$]\\Sigma[/$]: pásková abeceda co obsahuje [$]\\lambda[/$] pro prázdné políčko,
                [$]\\delta:Q\\times\\Sigma\\rightarrow Q\\times\\Sigma\\times\\{R, N, L\\} \\cup \\{\\perp\\}[/$] přechodová funkce,
                [$]q_0\\in Q[/$] počáteční stav,
                [$]F\\subseteq Q[/$] množina přijímacích stavů.<br>

                Řídící jednotka, páska (potenciálně nekonečná v obou
                směrech), hlava (pro čtení a zápis) pohybující se oběma
                směry.
-       guid: BzPQE=2Y};
        topic: Turingův stroj
        front: Signatura přechodové funkce
        back: |
                [$]\\delta:Q\\times\\Sigma\\rightarrow Q\\times\\Sigma\\times\\{R, N, L\\} \\cup \\{\\perp\\}[/$]
-       guid: K[[3613QJi
        front: Počáteční konfigurace TS
        back: |
                Vstupní slovo na pásce;
                vstupní slovo neobsahuje [$]\\lambda[/$];
                hlava nad prvním symbolem
-       guid: tQVm9O19O!
        front: Kdy končí výpočet TS?
        back: Při přechodu [$]\\delta(q,a)=\\perp[/$]
-       guid: j8XpXT5RMH
        front: Typová signatura přechodové funkce [$]k[/$]-páskového TS
        back: |
                [$]\\delta:Q\\times\\Sigma^k \\rightarrow Q\\times\\Sigma^k\\times\\{R,N,L\\}^k\\cup\\{\\perp\\}[/$]
-       guid: bRoh]4Psgn
        front: Značení všech slov nad abecedou [$]\\Sigma[/$]
        back: |
                [$]\\Sigma^{ * }[/$]
-       guid: Bwld?n,rHd
        front: Značení doplňku jazyka
        back: |
                [$]\\overline{L}[/$]
-       guid: l_tWk}*3a<
        front: Kdy TS přijímá slovo [$]w[/$]?
        back: |
                Když výpočet skončí v přijímacím stavu (tj. přechod do
                [$]\\perp[/$])
-       guid: Qj[ar)n5Rn
        front: Kdy TS odmítá slovo [$]w[/$]?
        back: |
                Když výpočet **skončí** ve stavu co není přijímací
                (tj. přechod do [$]\\perp[/$])
-       guid: r`clH%+3dA
        front: |
                Výpočet TS [$]M[/$] skončí nad [$]w[/$] - značení a
                pojmenování
        back: |
                [$]M(w)\\downarrow[/$]; [$]M[/$] nad [$]w[/$] konverguje
-       guid: K!h`2mQm:^
        front: |
                Výpočet TS [$]M[/$] neskončí nad [$]w[/$] - značení a
                pojmenování
        back: |
                [$]M(w)\\uparrow[/$]; [$]M[/$] nad [$]w[/$] diverguje
-       guid: N{(Bb=99S@
        front: |
                Značení: Jazyk slov přijímaných TS [$]M[/$]
        back: |
                [$]L(M)[/$]
-       guid: t3%R2|yHF(
        front: |
                Definice: Částečné rozhodnutelný, resp. rekurzivně
                spočetný jazyk
        back: |
                Existuje [$]M[/$], že [$]L = L(M)[/$]
-       guid: ob[ChPQ[D0
        front: |
                Definice: Rozhodnutelný, resp. rekurzivní jazyk
        back: |
                Existuje [$]M[/$], co se vždy zastaví a [$]L = L(M)[/$]
-       guid: rE*a?CBD3w
        front: Rekurzivní a rekurzivně spočetné jazyky
        back: |
                Rekurzivní: rozhodnutelné, rekurzivně spočetné: částečně rozhodnutelné (přijímané)
-       guid: k_B6*VXEJl
        front: Postova věta
        back: |
                [$]L[/$] je rozhodnutelný právě když jsou [$]L[/$] i
                [$]\\overline{L}[/$] částečně rozhodnutelné
-       guid: D-Nz]SP/JA
        front: Turingovy stroje a částečné funkce
        back: |
                [$]M[/$] nad abecedou [$]\\Sigma[/$] počítá částečnou
                funkci [$]f:\\Sigma^\* \\rightarrow \\Sigma^\*[/$], co
                vede na slovo po skončení výpočtu, jinak značíme
                [$]f_M(w)\\uparrow[/$].
-       guid: z`y$.4|3K}
        front: |
                Kódování vstupu pro TS co počítají funkci [$]n[/$]
                parametrů
        back: |
                [$] (x_1)_B \\# (x_2)_B \\# (x_3)_B \ldots[/$]
-       guid: O*1^usaL|4
        front: Gödelovo číslo TS
        back: |
                Jen TS co mají 1 přijímací stav a binární vstupní abecedu.
                Pracovní abeceda je neomezená.
                Zapíšeme přechodovou funkci do [$]\\{0,1,L,N,R,|,\\#,\\;\\}[/$].
                Kód instrukce: [$]\\delta(q_i, X_j) = (q_k, X < l, Z) (Z\\in\\{L,N,R\\}): (i)_B | (j)_B | (k)_B | (l)_B | Z[/$].
                Kód přechodové funkce: [$]C_1 \\# C_2 \\# \\ldots \\# C_N[/$]
                Kód binárního řetězce: vezmi řetězec a přidej před něj
                jedničku, to je binární číslo. (Dostanu vzájemně
                jednoznačné zobrazení do kladných přirozených čísel.
                Plus konvence: 0 odpovídá [$]\\varepsilon[/$].)
-       guid: tjOYRLgA&t
        front: |
                Značení: TS s Gödelovým číslem [$]e[/$], jím přijímaný
                jazyk. Co když [$]e[/$] není syntakticky validní
                Gödelovo číslo?
        back: |
                [$]M_e[/$], [$]L_e[/$].
                Když [$]e[/$] není validní, [$]M_e[/$] je prázdný stroj
                co vše odmítne, [$]L_e=\\emptyset[/$]
-       guid: I]DR)Y$Mug
        front: |
                Definice: Spočetná množina [$]A[/$]
        back: |
                Existuje prostá funkce [$]f:A\\rightarrow\\N[/$]
-       guid: Gtn+9?>-q<
        front: Diagonalizační jazyk a jaký je?
        back: |
                [$]L_{\\mathrm{DIAG}}=\\{w_i\\in\\{0,1\\}^{ * }: w_i\\not\\in L(M_i)\\}[/$]<br>
                Není částečně rozhodnutelný. Jeho doplněk je částečně
                rozhodnutelný, není rozhodnutelný.
-       guid: l$Wvuj~Xri
        front: Univerzální TS a jeho jazyk. Jaký je univerzální jazyk?
        back: |
                Univerzální TS: třípáskový - vstup
                (Gödelovo číslo [$];[/$] vstup TS), simulovaná páska,
                číslo stavu
                <br>
                Univerzální jazyk: jazyk univerzálního stroje.
                Částečně rozhodnutelný, není rozhodnutelný
-       guid: h2]{ie!VZv
        front: Model RAM
        back: |
                Registry: [$]r_i, i\\in\\N[/$]
                Obsah registru: [$][r_i][/$],
                nepřímá adresace: [$][[r_i]]=[r_{r[i]}][/$]
                Instrukce: [$]LOAD(C, r_i)[/$],
                [$]ADD(r_i, r_j, r_k): r_k := [r_i] + [r_j][/$],
                [$]SUB[/$] (opatrné odčítání: 0 při podtečení),
                [$]COPY([r_p], r_d): r_d := [[r_p]][/$],
                [$]COPY(r_s, [r_d]): r_{[r_d]} := [r_s][/$],
                [$]JNZ(r_i, I_z)[/$] jump if not zero,
                [$]READ(r_i)[/$],
                [$]PRINT(r_i)[/$]
-       guid: G:f:_6`YJG
        front: I/O v modelu RAM
        back: |
                Konec slova: READ načte 0
-       guid: rGa/-xr$4>
        front: Přijímání a odmítání RAM
        back: |
                Přijímání: [$]R(w)\\downarrow[/$] a první vypsané číslo
                je 1. Odmítání: [$]R(w)\\downarrow[/$] a nevypíše nic
                nebo první číslo je jiné než 1.
-       guid: d+X`{sxXdy
        front: Simulace TS na RAM
        back: Dvě pole na pásku
-       guid: O?<!^tU6gR
        front: Simulace RAM na TS
        back: |
                Mám na pásce reprezentační řetězec pro využité registry
                (protože jsou sparse):
                [$] (i_1)_B | ([r_{i_1}])_B \\# (i_2)_B | ([r_{i_2}])_B \\# \ldots[/$]
#        -
#                guid: OVlxs,#wD{
#                front: Pojmenování - Částečně/obecně rekurzivní funkce a (totální) vyčíslitelné funkce?
#                back: |
#                        Obecně rekurzivní funkce: totální vyčíslitelná funkce<br>
#                        Částecná rekurzivní funkce: vyčíslitelná funkce
-       guid: wo{AZ2qxD(
        front: |
                Značení a definice: doména, obor hodnot funkce, podmíněná rovnost
        back: |
                [$$]
                dom f = \\{x\\in\\Sigma_b^{ * } | f(x)\\downarrow\\}
                [/$$]

                [$$]
                rng f = \\{y\\in\\Sigma_b^{ * } | (\\e x\\in\\Sigma_b^{ * })[f(x)\downarrow=y]\\}
                [/$$]

                [$$]
                f\\approx g\\Leftrightarrow[dom f = dom g \\wedge (\\a x\\in dom f)[f(x)=g(x)]]
                [/$$]
-       guid: LC**b:zgD1
        front: |
                Značení: funkce počítaná [$]M_e[/$], funkce [$]n[/$]
                parametrů ([$]< x_1,\\ldots x_n >=< x_1\\#x_2\\#\\ldots x_n >\\in\\sigma_b^{ * }[/$]) počítaná [$]M_e[/$]
        back: |
                [$]\varphi_e[/$]; [$]\varphi_e^{(n)}[/$]
-       guid: m.Ad/T(;v[
        front: |
                Univerzální funkce pro [$]n[/$]
        back: |
                [$]\\Psi_n(e,x_1,\\ldots x_n)\\approx \\varphi_e^{(n)}(x_1,\\ldots x_n)[/$]
-       guid: h]J0iz26s,
        front: |
                3 ekvivalence pro částečně rozhodnutelné jazyky
        back: |
                <ul>
                <li> [$]L[/$] je částečně rozhodnutelný
                <li> Existuje TS [$]M[/$] že [$]L=\\{x\\in\\Sigma_b^\\*|M_e(x)\\downarrow\\}(=dom \\varphi_e)[/$]
                <li> Existuje rozhodnutelný jazyk [$]B[/$], že
                     [$]L=\\{x\\in\\Sigma_b^\\*|(\\e y\\in\\Sigma_b^{ * })[< x,y >\\in B]\\}[/$]
                </ul>
-       guid: tey2G-+Wy?
        front: Rozhodnutelnost jazyka a jeho charakteristická funkce
        back: |
                Jazyk je rozhodnutelný právě má algoritmicky
                vyčíslitelnou char. funkci.
-       guid: l5%,4F<!Ep
        front: |
                Definice: Enumerátor pro [$]L[/$]
        back: |
                Turingův stroj co postupně vypisuje slova jazyka
                [$]L[/$] a každé někdy vypíše
        include_reverse: true
-       guid: AeU+($R%hj
        front: Enumerátory a (částečně) rozhodnutelné jazyky
        back: |
                Částečně rozhodnutelný jazyk: existuje enumerátor
                Rozhodnutelný: existuje enumerátor co vypisuje slova
                v pořadí dle očíslování bin. řetězců
-       guid: P/hTEv,GHn
        front: |
                Definice m-převoditelnosti, m-úplnosti,
                1-převoditelnosti, 1-úplnosti
        back: |
                [$]A[/$] je [$]m[/$]-převoditelný na [$]B[/$] ([$]A\\leq_m B[/$]),
                pokud existuje totální vyčíslitelná funkce [$]f[/$] kde
                [$] (\\a x\\in\\Sigma_b^{ * })[x\\in A\\ekv f(x)\\in B][/$]<br>

                1-převoditelnost a úplnost: [$]f[/$] má být navíc prostá
-       guid: ottcRpw]YO
        front: |
                Definice: [$]m[/$]-úplný jazyk
        back: |
                Jazyk, co je částečně rozhodnutelný a každý částečně
                rozhodnutelný jazyk je na něj [$]m[/$]-převoditelný.
-       guid: AJ-Qd?v_5/
        front: |
                [$]m[/$]-převoditelnost: vlastnosti a rozhodnutelnost
        back: |
                <ul>
                <li>
                [$]\\leq_m[/$] je kvaziuspořádání.
                <li>
                Když [$]A\\leq_m B[/$] a [$]B[/$] je
                (částečně) rozhodnutelný, tak to je i [$]A[/$].
                Když je [$]B[/$] částečně rozhodnutelný a [$]A[/$]
                m-úplný, tak [$]B[/$] je taky m-úplný.
                </ul>
-       guid: r__D&$GHYw
        front: |
                [$]m[/$]-úplný jazyk [$]K_0[/$]. Jaký je?
        back: |
                [$]K_0=\\{< w_i,x > | M_i(x)\\downarrow \\}[/$].
                Částečně rozhodnutelný, nikoli rozhodnutelný.
-       guid: z45D9:kAV]
        front: |
                [$]m[/$]-úplný jazyk [$]K[/$]. Jaký je?
        back: |
                [$]K=\\{w_i | M_i(w_i)\\downarrow \\}[/$].
                Částečně rozhodnutelný, nikoli rozhodnutelný.
-       guid: mM$p{XUkE!
        front: Riceova věta
        back: |
                Ať [$]C[/$] je třída vyčíslitelných funkcí, položme
                [$]A_C=\\{e | \\varphi_e\\in C\\}[/$]. Potom
                [$]A_C[/$] je rozhodnutelná, právě když je [$]C[/$]
                buď prázdná nebo obsahuje všechny vyčíslitelné funkce.
-       guid: JlFYwU((Xl
        front: s-m-n věta
        back: |
                [$]\\a m,n\\geq 1[/$] existuje prostá totální
                vyčíslitelná funkce
                [$]s_n^m:\\N^{m+1}\\rightarrow\\N[/$] že pro každé
                [$]x,y_1,\\ldots y_m,z_1,\\ldots z_n\\in\\Sigma_b^{ * }[/$]
                platí:
                [$$]\\varphi^{(n)}_{s_n^m(x,y_1,\\ldots,y_m)}(z_1,\\ldots z_n)\\approx \\varphi_x^{(m+n)}(y_1,\\ldots y_m,z_1,\\ldots z_n)[/$$]
-       guid: oVt?Ho?bT6
        front: Postův korespondenční problém
        back: |
                Vstup: kostky [$]P=\\{[a_1, b_1], [a_2, b_2], \\ldots [a_k, b_k]\\}[/$].
                Výstup: existuje párovací posloupnost?
                Nerozhodnutelný.
-       guid: Qv@)0TCHZq
        front: Formalizace úlohy
        back: |
                Výstup: pro [$]x[/$] nějaké [$]y[/$] co splňuje nějaké
                podmínky, nebo že to nejde.
-       guid: KFR-`JYI$,
        topic: Turingův stroj
        front: |
                Definice: Časová a prostorová složitost
        back: |
                Pracuje v čase [$]f(n)[/$] když na vstupu délky
                [$]|x|=n[/$] skončí po nejvýše [$]f(n)[/$] krocích.
                Obdobně prostor a použité popsané buňky.
-       guid: Kz>aQ3mKqg
        front: |
                Definice: [$]\\mathrm{TIME}(f(n))[/$]
        back: |
                Jazyky přijímané TS co pracují v čase [$]O(f(n))[/$].
        include_reverse: true
-       guid: m)2^*,smna
        front: |
                Definice: [$]\\mathrm{SPACE}(f(n))[/$]
        include_reverse: true
        back: |
                Jazyky přijímané TS co pracují v prostoru
                [$]O(f(n))[/$].
-       guid: x~Estoe,m$
        front: |
                Vztah [$]\\mathrm{TIME}(f(n))[/$] a
                [$]\\mathrm{SPACE}(f(n))[/$]
        back: |
                [$]\\mathrm{TIME}(f(n))\\subseteq\\mathrm{SPACE}(f(n))[/$]
                pro každou funkci [$]f[/$].
-       guid: c;69]))UGV
        front: |
                Definice: [$]\\mathrm{P}[/$]
        back: |
                [$]\\bigcup_{k\\in\\N} \\mathrm{TIME}(n^k)[/$]
        include_reverse: true
-       guid: H;8,lVXA=h
        front: |
                Definice: [$]\\mathrm{PSPACE}[/$]
        back: |
                [$]\\bigcup_{k\\in\\N} \\mathrm{SPACE}(n^k)[/$]
        include_reverse: true
-       guid: Dd2q#G)*mj
        front: |
                Definice: [$]\\mathrm{EXPTIME}[/$]
        back: |
                [$]\\bigcup_{k\\in\\N} \\mathrm{TIME}(2^{n^k})[/$]
        include_reverse: true
-       guid: Chp^NrE,O$
        front: Silnější Church-Turingova teze pro polynomy
        back: |
                Reálné výpočetní modely jde simulovat na TS s
                polynomiálním zpomalením/nárůstem prostoru.
-       guid: N!%-ttnCf!
        front: Verifikátory a certifikáty
        back: |
                Verifikátor pro jazyk [$]A[/$]:
                algoritmus [$]V[/$], že
                [$]A=\\{x: (\\e y)[V \\text{prijme} < x,y >]\\}[/$]
                [$]y[/$]: certifikát pro [$]x[/$].
                Časová složitost verifikátoru se měří dle [$]|x|[/$].
-       guid: NM=qZq&=<z
        front: |
                Definice: *polynomiální* verifikátor, certifikát
        back: |
                Polynomiální čas, tedy i délka certifikátu.
-       guid: HU@U7;T>%*
        front: |
                Definice: [$]\\mathrm{NP}[/$] z verifikátorů
        back: Třída jazyků, co mají polynomiální verifikátory
        include_reverse: true
-       guid: Ez);3&8$3e
        front: Nedeterministický Turingáč a jeho výpočet a přijímání
        back: |
                Stejný jako deterministický, ale:
                [$]\\delta:Q\\times\\Sigma\\rightarrow\\mathcal{P}(Q\\times\\Sigma\\times\\{L,N,R\\})[/$]
                Výpočet: validní posloupnost konfigurací.
                Přijímací výpočet: končí v přijímacím stavu.
                NTS přijímá, když existuje přijímací výpočet.
-       guid: gzf)+qYVNM
        front: |
                Definice: [$]\\mathrm{NTIME}(f(n))[/$]
        back: |
                Jazyky přijímané nedeterministickými TS co pracují
                v čase [$]O(f(n))[/$]
        include_reverse: true
-       guid: mHzB$O(czz
        front: |
                Definice: [$]\\mathrm{NSPACE}(f(n))[/$]
        back: |
                Jazyky přijímané nedeterministickými TS co pracují
                v prostoru [$]O(f(n))[/$]
        include_reverse: true
-       guid: B*Z&E){gHB
        front: |
                Vztah [$]\\mathrm{SPACE}(f(n)), \\mathrm{TIME}(f(n)),
                \\mathrm{NSPACE}(f(n)), \\mathrm{NTIME}(f(n))[/$]
        back: |
                [$]\\mathrm{TIME}(f(n))\\subseteq \\mathrm{NTIME}(f(n))\\subseteq
                \\mathrm{SPACE}(f(n))\\subseteq \\mathrm{NSPACE}(f(n))[/$]
-       guid: rPnzB(/FP{
        front: Definice NP přes nedeterministické TS
        back: |
                [$]\\bigcup_{k\\in\\N} \\mathrm{NTIME}(n^k)[/$]
        include_reverse: true
-       guid: I.5f(!;md<
        front: Model TS s sublineárním prostorem
        back: |
                Vstupní páska jen pro čtení, pracovní pro čtení
                a zápis, výstupní jen pro zápis a hýbe se jen vpravo.
                Do prostoru se počítají jen pracovní pásky.
-       guid: b/.3DJ*IG)
        front: |
                Definice: [$]\\mathrm{L}[/$]
        back: |
                [$]\\mathrm{SPACE}(\\log_2 n)[/$]
-       guid: 'm^[$o!<v!:'
        front: |
                Definice: [$]\\mathrm{NL}[/$]
        back: |
                [$]\\mathrm{NSPACE}(\\log_2 n)[/$]
-       guid: t@mz-DqVzD
        front: |
                Definice: [$]\\mathrm{NPSPACE}[/$]
        back: |
                [$]\\bigcup_{k\\in\\N}\\mathrm{NSPACE}(n^k)[/$]
-       guid: qb:in@+DES
        front: |
                Věta [$]\\mathrm{NSPACE}(f(n))[/$] a
                [$]\\mathrm{TIME}(2^{c_L f(n)})[/$]
        back: |
                Ať [$]f(n)[/$] je funkce kde [$]f(n)\\geq\\log_2 n[/$].
                Pak pro každý [$]L\\in \\mathrm{NSPACE}(f(n))[/$] platí
                [$]L\\in \\mathrm{TIME}(2^{c_L f(n)})[/$], kde
                [$]c_L[/$] je konstanta závislá na jazyku [$]L[/$].
-       guid: t[=kNIFFh`
        front: Ať je [$]L\\in\\mathrm{NSPACE}(f(n))[/$]. Co víme o čase?
        back: |
                [$$]L\\in\\mathrm{TIME}(2^{c_L f(n)})[/$$]
                (pro nějakou konstantu [$]c_L[/$] závislou na [$]L[/$])
-       guid: A_fKA>EJeI
        front: |
                Inkluze [$]\\mathrm{L}, \\mathrm{P}, \\mathrm{EXPTIME},
                \\mathrm{NL}, \\mathrm{NP}, \\mathrm{NPSPACE},
                \\mathrm{PSPACE}[/$]
        back: |
                [$$]\\mathrm{L}\\subseteq \\mathrm{NL}\\subseteq
                \\mathrm{P}\\subseteq \\mathrm{NP}\\subseteq
                \\mathrm{PSPACE}\\subseteq \\mathrm{NPSPACE}\\subseteq
                \\mathrm{EXPTIME}[/$$]
-       guid: c7SAaP;h(@
        front: Savičova věta
        back: |
                Pro každou [$]f(n)\\geq\\log_2 n[/$] platí že
                [$]\\mathrm{NSPACE}(f(n))\\subseteq \\mathrm{SPACE}(f^2(n))[/$].
-       guid: krh^gt^rq
        front: |
                Vztah [$]\\mathrm{PSPACE}[/$]/[$]\\mathrm{NPSPACE}[/$],
                proč
        back: |
                [$]\\mathrm{PSPACE}=\\mathrm{NPSPACE}[/$],
                kvůli Savičově větě.
-       guid: gxSycO#{fF
        front: |
                Definice: Prostorově konstruovatelná funkce [$]f[/$]
        back: |
                [$]f:\\N\\rightarrow\\N[/$], [$]f(n)\\geq\\log n[/$],
                funkce zobrazující [$]1^n[/$] na binární reprezentaci
                [$]f(n)[/$] je vyčíslitelná v prostoru [$]O(f(n))[/$]
-       guid: L,K3v%koQ8
        front: Věta o deterministické prostorové hierarchii
        back: |
                Pro prostorově konstruovatelnou [$]f[/$] existuje
                jazyk rozhodnutelný v prostoru [$]O(f(n))[/$], ale ne
                [$]o(f(n))[/$].
-       guid: z^Nk(+pjtl
        front: |
                [$]\\mathrm{NL}[/$] a [$]\\mathrm{PSPACE}[/$],
                [$]\\mathrm{PSPACE}[/$] a [$]\\mathrm{EXPSPACE}[/$],
                proč
        back: |
                [$]\\mathrm{NL}\\subsetneq\\mathrm{PSPACE}\\subsetneq
                \\mathrm{EXPSPACE}[/$], protože věta o deterministické
                prostorové hierarchii
-       guid: OEJ_y=b=Uh
        front: |
                Definice: Časově konstruovatelné funkce [$]f[/$]
        back: |
                [$]f:\\N\\rightarrow\\N[/$], [$]f(n)\geq n[/$],
                funkce zobrazující [$]1^n[/$] na binární reprezentaci
                [$]f(n)[/$] je vyčíslitelná v čase [$]O(f(n))[/$].
-       guid: HzfL<toyb.
        front: Věta o deterministické časové hierarchii
        back: |
                Pro časově konstruovatelnou funkci [$]f[/$]
                existuje jazyk [$]A[/$] rozhodnutelný v čase
                [$]O(f(n))[/$], ale ne v čase
                [$]o(f(n) / \\log f(n))[/$].
-       guid: r}xh!j>v#{
        front: |
                [$]\\mathrm{P}[/$] a [$]\\mathrm{EXPTIME}[/$], proč
        back: |
                [$]\\mathrm{P}\\subsetneq \\mathrm{EXPTIME}[/$], protože
                věta o deterministické časové hierarchii
-       guid: Aw`@@kn-xj
        front: Polynomiální převoditelnost jazyků - definice
        back: |
                [$]A[/$] je převoditelný na [$]B[/$] v polynomiálním
                čase ([$]A\\leq_m^P B[/$]) pokud existuje funkce
                [$]f:\\Sigma^{ * }\\rightarrow\\Sigma^{ * }[/$]
                vyčíslitelná v polynomiálním čase, pro kterou platí
                [$] (\\a w\\in\\Sigma^{ * })[w\\in A\\ekv f(w)\\in B][/$].
-       guid: C|mWoL<8ed
        front: |
                Vlastnosti relace polynomiální převoditelnosti,
                [$]\\mathrm{P}[/$] a [$]\\mathrm{NP}[/$] třídy
        back: |
                Je to kvaziuspořádání (tranzitivní a reflexivní). Když
                [$]A\\leq_m^P B[/$] a [$]B\\in \\mathrm{P}[/$], pak
                [$]A\\in \\mathrm{P}[/$]. Stejně [$]\\mathrm{NP}[/$].
-       guid: P)BnJYudD1
        front: Definice NP-těžkosti
        back: |
                [$]B[/$] je NP-těžký jazyk když na něj je polypřevoditelný
                libovolný jazyk [$]A\\in \\mathrm{NP}[/$].
-       guid: qkh&4Y7pw,
        front: Definice NP-úplnosti
        back: |
                [$]B[/$] je NP-úplný je-li NP-těžký a v NP.
-       guid: kr@(k*T~~y
        front: Kachlíkování
        back: |
                Barvy, mřížka [$]s\\times s[/$] s obarvenými kraji.
                Výstup: jde bez otáčení okachličkovat? NP-úplný.
-       guid: i{|IHOXql0
        front: Cook-Levinova věta
        back: SAT v CNF je NP-úplný.
-       guid: m#A(%Iq5cV
        front: 3-SAT vs. 2-SAT v kontextu slozitosti
        back: 3-SAT je NP-complete, 2-SAT je polynomialne resitelny
-       guid: Awf)4>mYYs
        front: Vertex cover problém
        back: |
                Existuje množina vrcholů velikosti nejvýš [$]k[/$] co
                se dotýká každé hrany? NP-úplný.
-       guid: 'r32gFUD_p:'
        front: Hamiltonovská kružnice
        back: Obsahuje graf cyklus přes všechny vrcholy? Je NP-c.
-       guid: f/8yV7=6Bk
        front: 3D-matching
        back: |
                Mám množinu trojic
                [$]M\\subseteq W\\times X\\times Y[/$].
                Existuje množina velikosti [$]q[/$] co má jenom trojice
                co se nikde neshodují? NP-c.
-       guid: X@@i(p3k}
        front: |
                Definice: Aproximační algoritmus a poměr
        back: |
                Algoritmus [$]R[/$] co pro instanci [$]I\\in D_A[/$] má
                za výstup [$]R(I)[/$] přípustné řešení [$]\\sigma\\in S_A(I)[/$]
                (pokud přípustné řešení existuje).
                <br>
                Když maximalizuju, tak [$]\\varepsilon > 1[/$] je takové
                že [$]\\mathrm{opt}(I) \\leq \\varepsilon \\cdot \\mu_A(I,R(I))[/$].
                <br>
                Když minimalizuju, tak [$]\\varepsilon \\geq 1[/$],
                [$]\\mu_A(I,R(I))\\leq \\varepsilon\\cdot \\mathrm{opt}(I)[/$].
-       guid: ou[v0l#hM|
        front: Bin-packing a first-fit aproximacni faktor
        back: |
                FF vytvori nejvyse [$]2 \cdot \mathrm{opt}(I)[/$] kosu.
                Pro kazde [$]m[/$] existuje instance [$]I[/$] kde [$]\mathrm{opt}(I)\geq m[/$] a [$]FF[/$] vytvori aspon [$]5/3 \mathrm{opt}(I)[/$] kosu.
-       guid: bQ2BFiiak-
        front: Aproximace TSP a P vs. NP
        back: |
                Pokud [$]P\\neq NP[/$], tak neexistuje aproximacni
                algoritmus pro TSP s konstantním poměrem.
-       guid: dnS|8m7]sx
        front: Pseudopolynomiální algoritmus na batoh, složitost
        back: |
                Vstup: velikost batohu, pole cen a hmotností předmětů.
                Výstup: maximálně cenné předměty co se vejdou do batohu.<br>

                Algoritmus: Postupně buduj matici, co pro každé [$]j, c[/$]
                obsahuje množinu prvků z [$]\\{1,\ldots j\\}[/$] s cenou [$]c[/$] a minimální celkovou vahou předmětů.<br>

                Složitost: [$]\\Theta(nV)[/$], kde [$]V[/$] je součet cen.<br>
                Velikost vstupu je [$]O(n\\log_2 (B+V))[/$], takže je pseudopolynomiální.
-       guid: F>XD.p&Kzj
        front: |
                Definice: Číselný rozhodovací problém
        back: |
                Rozhodovací problém [$]A[/$] je číselný, pokud pro každý
                polynom [$]p[/$] existuje instance kde [$]\\mathrm{max}(I) > p(\\mathrm{len}(I))[/$],
                kde [$]\\mathrm{max}[/$] je největší číselný parametr vyskytující se v [$]I[/$],
                [$]\\mathrm{len}[/$] je délka instance v binárním kódování.<br>

                Batoh, Loupežníci jsou číselné.<br>

                Splnitelnost, Kachlíkování nejsou.
-       guid: bjHMJu;2)J
        front: Definice pseudopolynomiálního algoritmu
        back: |
                Složitost omezena
                [$]\\mathrm{poly}(\\mathrm{len}(I), \\mathrm{max}(I))[/$]
-       guid: ORsd);hm[/
        front: Definice silné NP-úplnosti
        back: |
                [$]A[/$] je rozhodovací problém, [$]p[/$] polynom.<br>
                [$]A(p)[/$]: restrikce na instance, kde [$]\\mathrm{max}(I) \\leq p(\\mathrm{len}(I))[/$].<br>
                [$]A[/$] je silně NP-úplný, když nějaká jeho polynomiální
                restrikce je NP-úplná.
-       guid: OXP9~$:0!H
        front: Silná NP-úplnost a číselné problémy
        back: |
                Každý nečíselný NP-úplný problém je silně NP-úplný.<br>
                Jinými slovy: NP-úplný i při unárním kódování.
-       guid: vSW}=8Qt_p
        front: |
                Co kdyby existoval silně NP-úplný problém co jde vyřešit
                pseudopolynomiálním algoritmem?
        back: |
                [$]P=NP[/$]
-       guid: Dc=f|&l$&#
        front: TSP a silná NP-c
        back: TSP je silně NP-c
-       guid: 'bc(C3H@u>:'
        front: Úplně polynomiální aproximační schema pro Batoh
        back: |
                Vstup: velikost batohu, velikosti předmětů a cen, předpokládám že všechny předměty se jednotlivě vejdou do batohu, racionální číslo [$]\\varepsilon > 0[/$]
                Když [$]\\varepsilon[/$] je větší než [$]n-1[/$], vrať nejdražší předmět.
                Jinak usekni bity z cen (resp. poděl). Pak použij pseudopolynomiální algoritmus.
-       guid: Lpkh|TSu^;
        front: Aproximační schema pro Batoh - složitost a aproximační poměr
        back: |
                [$]\\mathrm{opt}(I)\\leq
                (1+\\varepsilon)\\cdot\\mathrm{bapx}(I,\\varepsilon)[/$],
                čas [$]O(n^3/\\varepsilon)[/$]
-       guid: '*jJ:w3T*5'
        front: |
                Definice: Aproximační schema
        back: |
                Algoritmus co na instanci a [$]\\varepsilon>0[/$] vydá
                řešení s apx. poměrem [$]1+\\varepsilon[/$].
-       guid: OKMry%4_a,
        front: |
                Definice: Polynomiální aproximační schema
        back: |
                Aproximační schema co pracuje v
                [$]O(\\mathrm{poly}(\\mathrm{len}(I)))[/$]
-       guid: m{w,cKpY@C
        front: |
                Definice: Úplně polynomiální aproximační schema
        back: |
                Aproximační schema co pracuje v
                [$]O(\\mathrm{poly}(\\mathrm{len}(I),\\frac{1}{\\varepsilon}))[/$]
-       guid: DxaBoYcJha
        front: Aproximační schemata a silná NP-úplnost. Důsledek?
        back: |
                Ať je [$]A[/$] optimalizační úloha a existuje polynom [$]q[/$],
                že pro všechny instance [$]\\mathrm{opt}(I) < q(\\mathrm{len}(I), \\mathrm{max}(I))[/$].
                <br>
                Když existuje ÚPAS pro A, tak existuje pseudopolynomiální
                algoritmus pro A.
                <br>
                (Tedy: pokud [$]P\\neq NP[/$], neexistuje ÚPAS pro
                žádnou silně NP-úplnou úlohu co splňuje požadavky věty)
-       guid: jEXIwjnjYZ
        front: Definice co-NP jazyků (proti NP jazykům)
        back: Jazyky, jejichž doplněk patří do NP
-       guid: t,0>8cau77
        front: co-NP a verifikátory
        back: |
                [$]L[/$] patří do co-NP právě když existuje polynom
                [$]p[/$] a polynomiální verifikátor, že [$]L=\\{x | (\\a y) [|y|\\leq p(|x|) \\Rightarrow V(x,y) prijme]\\}[/$].
                (Viz: [$]\\a[/$], ne [$]\\e[/$])
-       guid: HX5WA,_+%_
        front: P a NP a co-NP
        back: |
                [$]P\\subseteq NP\\cap co-NP[/$]
-       guid: d/>x5J&A>f
        front: NP-úplnost a co-NP-úplnost
        back: |
                [$]A[/$] je co-NP-complete právě když [$]\\overline{A}[/$]
                je NP-complete. Kdyby byl nějaký jazyk NP-úplný a v
                co-NP, tak by bylo co-NP=NP.
-       guid: tqn@1pL-Y]
        front: |
                Definice: [$]\\mathrm{2-EXPTIME}[/$]
        back: |
                [$]\\bigcup_{k\\in\\N} \\mathrm{TIME}(2^{2^{n^k}})[/$]
        include_reverse: true
-       guid: p8vR:n7t){
        front: |
                Definice: [$]\\mathrm{ELEMENTARY}[/$]
        back: |
                [$]\\mathrm{EXPTIME} \\cup \\mathrm{2-EXPTIME} \\cup
                \\mathrm{3-EXPTIME} \\cup \\ldots = \\mathrm{TIME}(2^n)
                \\cup \\mathrm{TIME}(2^{2^n}) \\cup \\mathrm{TIME}(2^{2^{2^n}})
                \\cup \\ldots[/$]
        include_reverse: true
-       guid: pM&#6F2WWE
        front: Co kdyby byl nějaký NP-úplný problém v co-NP?
        back: NP=co-NP
-       guid: Fdl!L{cS|u
        front: Co kdyby byl nějaký co-NP-úplný problém v NP?
        back: NP=co-NP
