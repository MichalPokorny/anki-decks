deck: All::Magisterské státnice::Řešení úloh a plánování::DPV::Přednáška 1 (řešení SAT)
notes:
        # DPV 01
        -
                uuid: 8e2b26e8-30f3-4c2c-aba3-6c85c6284774
                topic: Řešení SAT
                front: NNF formule a jak rychlý je převod
                back: >
                        Formule co má jenom [$]\\wedge, \\vee, \\neg[/$] a negace je jenom u literálů.
                        Převod trvá lineární čas (de Morgan a eliminace dvojité negace formuli neprodlužují).
        -
                uuid: 0f9b799d-839b-4e9e-8ae1-2314bae8f593
                topic: Řešení SAT
                front: >
                        Převod do CNF v lineárním čase: Jak se jmenuje? Jak se dělá?
                back: >
                        Tseitinovo kódování.<br>
                        Vyrobím si pro formuli generující strom.<br>
                        Pro vnitřní vrcholy stromu si vyrobím nové proměnné.
        -
                uuid: dd575466-88ed-4d73-8c3b-a3166cc6bcc0
                topic: Řešení SAT
                front: Definice - Antecedentní klauzule (v SAT solveru)
                back: >
                        Klauzule, která vyvolala unit propagaci literálu (ve které se nacházel).
        -
                uuid: ad4dd92e-6a3a-4d07-80d9-4e797a51ccfe
                topic: Řešení SAT
                front: Definice implikačního grafu
                back: >
                        Graf popisuje fázi DPLL.<br>
                        Vrcholy jsou proměnné a K.
                        Jsou označené ohodnocením a "decision levelem".
                        <br>
                        Hrany jsou důvody k přiřazení hodnoty proměnné.
                        Hrana mezi [$]x\\rightarrow y[/$]:
                        [$]\\mathrm{Antecedent}(y)[/$] obsahuje buď [$]\\neg x[/$] a
                        [$]\\alpha(x)=1[/$], nebo obsahuje [$]x[/$] a [$]\\alpha(x)=0[/$].
                        Hrana je označena [$]\\mathrm{Antecedent}(y)[/$].
                        <br>
                        Vertex K označuje konflikt:
                        vlož hranu [$]x\\rightarrow K[/$]
                        pokud existuje konfliktní klauzule [$]c[/$] vzhledem k [$]\\alpha[/$]
                        a [$]c[/$] buď obsahuje [$]\\neg x[/$] a [$]\\alpha(x)=1[/$],
                        nebo obsahuje [$]x[/$] a [$]\\alpha(x)=0[/$].
                        Tuto hranu označ konfliktní klauzulí.
        -
                uuid: d819b91f-b306-437a-9aed-189891951eb5
                topic: Řešení SAT
                front: Jak se z implikačního grafu vykouká nová konfliktní klauzule?
                back: >
                        Řez v grafu mezi rozhodnutími a K.
        -
                uuid: 8b253b81-ab75-44b3-8dfd-6454c64fcde2
                topic: Řešení SAT
                front: K čemu jsou v implikačním grafu řezy?
                back: >
                        Řez v grafu mezi rozhodnutími a K je konfliktní
                        klauzule implikovaná rozhodnutími.
        -
                uuid: f2529af7-25ca-42a2-a230-ec5edf03cb03
                topic: Řešení SAT
                front: Algoritmus CDCL - za co je to zkratka, co dělá?
                back: >
                        Conflict-driven clause learning.<br>

                        Udělej unit propagaci a pure variable elimination.<br>

                        Opakuj:
                        <ul>
                        <li>Vyber proměnnou, která ještě není ohodnocená, nebo skonči.
                        <li>Přidej nové ohodnocení do modelu.
                        <li>(@) Udělej unit propagaci
                        <li>Jestli unit propagace dopadla špatně,
                        <li>zanalyzuj konflikt &mdash; najdi backtrack úroveň,
                            vlož novou naučenou klauzuli,
                        <li>backtrackuj před konflikt (smaž pozdější přiřazení),
                        <li>jdi na (@)
                        </ul>
        -
                uuid: 1c2792bd-77f2-46b9-bc3c-34fad1a2a7a4
                topic: Řešení SAT
                front: Jak v CDCL vybrat vhodnou klauzuli k naučení?
                back: >
                        Asserting clause: konfliktní klauzule co obsahuje
                        přesně jeden literál ze současného rozhodnutí.
                        (Po backtracku unit propagace okamžitě dá rozhodnutí.)
                        <br>
                        Unique implication point: takový bod, skrz který vedou
                        všechny cesty z posledního decision vertexu do K.
                        <br>
                        Vybereme UIP, který je nejbližší k K.
                        Naučíme se jako konfliktní klauzuli tenhle UIP spolu
                        s opakem literálu z poslední rozhodovací vrstvy.
        -
                uuid: 597265d0-ed3d-4af5-ad9f-dfc558da09d0
                topic: Řešení SAT
                front: Kam v CDCL backtrackovat?
                back: >
                        Podívej se na klauzuli, kterou ses naučil.
                        Backtrackni do druhé nejhlubší úrovně přiřazení v ní.
                        (Smaž všechny rozhodnutí udělané potom.)
        -
                uuid: b72a9764-ad55-4a3b-b72a-4376e36eed3c
                topic: Řešení SAT
                front: CDCL - detaily analýzy konfliktu
                back: >
                        Vezmi konfliktní klauzuli.

                        Dokud neobsahuje konfliktní klauzule právě jeden literál
                        z posledního decision levelu: vezmi poslední v ní
                        dosazený literál a resolvuj ho s jeho antecedentem.
        -
                uuid: cea23069-42ba-472c-b0f0-f875e55b8cf7
                topic: Řešení SAT
                front: Heuristiky pro výběr proměnných k dosazení - jak se jmenují?
                back: >
                        VSIDS (Variable State Independent Decaying Sum),
                        Berkmin
        -
                uuid: 05bb9ed3-3b6f-44fa-a69d-519a55ef075c
                topic: Řešení SAT
                front: Heuristika VSIDS
                back: >
                        Každý literál má skóre. Když se naučím klauzuli,
                        přičtu jejím literálům 1, pravidělně všechny skóre
                        exponenciálně zmenšuju.
                        Preferuju řešit konfliktní klauzule.
        -
                uuid: 3bfa2a31-4515-4bd9-abcf-fa2ce8ef91f9
                topic: Řešení SAT
                front: Heuristika Berkmin
                back: >
                        Každá proměnná, literál má VSIDS skóre, které se nedělí
                        průběžně.<br>
                        Konfliktní klauzule házím do stacku.
                        Když vybírám proměnnou, vezmu jednu klauzuli
                        ze stacku, z ní dosadím do proměnné s nejvyšším skóre
                        a polaritu podle skóre literálu. Jestli je stack
                        vyberu jinak.
        -
                uuid: 5f932d37-3de7-43c5-8c67-50e2e844762d
                topic: Řešení SAT
                front: Sledování dvou literálů
                back: >
                        V každé nevyřešené klauzuli si označím dva nedosazené literály.
                        <br>
                        Pro každou proměnnou si pamatuju označené výskyty.
                        Když dosadím třeba [$]x_1=0[/$], zkontroluju jenom
                        klauzule co sledují [$]x_1[/$] &mdash; v nich
                        hledám další proměnnou ke sledování. Neexistuje-li,
                        tak z klauzule zbyla jednotková klauzule.
        -
                uuid: 75e77a4d-deea-4807-86d3-fbeede06e813
                front: Co udělá sledování dvou literálů při backtracku?
                back: Nic se nemusí měnit
