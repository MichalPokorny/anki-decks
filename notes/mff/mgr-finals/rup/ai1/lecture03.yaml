deck: All::Magisterské státnice::Řešení úloh a plánování::AI1::Přednáška 3 (prohledávání
        stavového prostoru)
notes:
        # AI lecture03eng
        -       guid: z0b1]!Gmzk
                front: |
                        Prohledávání stavového prostoru jako stromu &mdash;
                        velmi obecně
                back: |
                        Začni v rootu. Zkontroluj jestli jsem v goalu.
                        Expanduj cíl, pomocí prohledávací strategie vyber další stav.
        -       guid: B%`rUm13Je
                front: Co obsahuje vrchol v prohledávacím stromu ve stavovém prostoru?
                back: |
                        Současný stav, pointer do předka, akci která vedla, cenu od kořene, hloubku
        -       guid: mv{@qlf?,^
                front: Prohledávání stavového prostoru - Fringe
                back: |
                        Ještě neexpandované vrcholy
        -       guid: Ci<(i;$2XI
                front: Co nás zajímá na algoritmech na prohledání stavového prostoru?
                back: |
                        Kompletnost - najde řešení když existuje?<br>
                        Najde optimální řešení?<br>
                        Časová složistost<br>
                        Prostorová složitost
        -       guid: t7%{oLf!2M
                front: Jaké faktory určují složitost prohledávání stavového prostoru?
                back: |
                        Branching faktor: [$]b[/$]<br>
                        Depth: [$]d[/$] (do nejbližšího goalu)<br>
                        Path length: [$]m[/$] (maximální délka cesty)
        -       guid: g&Dt6y1nxI
                front: Informované a neinformované hledání
                back: |
                        Informované hledání: používám heuristiky
        -       guid: oh[!4=o$CT
                topic: BFS
                front: Časová a prostorová složitost
                back: |
                        Časová složitost: [$]\\O(b^{d+1})[/$], to samé prostor. Brzo dojde.
        -       guid: IC$!wW6B71
                front: Prohledávání stavového prostoru - BFS, kompletnost, optimalita
                back: |
                        Expanduj všechno v dané hloubce &mdash; FIFO.
                        Je kompletní.<br>

                        Optimalita: Nejmělčí cílový stav není nutně optimální!<br>
        -       guid: I>ns^[_>DI
                topic: Uniform-cost search
                front: Kompletnost a optimalita
                back: |
                        Jestli cena kroku je kladná (nenulová)
        -       guid: PPHDiTBdnI
                topic: Uniform-cost search
                front: Algoritmus
                back: |
                        Modifikuju BFS abych našel optimální řešení.
                        Expanduju node, který má nejmenší cost [$]g(n)[/$].
                        (Bacha na zero-cost steps!)
        -       guid: e60NX+&2St
                topic: Uniform-cost search
                front: Časová a paměťová složitost
                back: |
                        Složitost záleží na ceně optimální cesty.
                        [$]\\O(b^{1+\\lfloor C^*/\\varepsilon \\rfloor})[/$]<br>

                        Může to být mnohem horší než BFS.
        -       guid: m8|ee=PL,(
                topic: DFS
                front: Algoritmus
                back: |
                        Vždy expanduj nejhlubší node, pomocí LIFO jako
                        frontieru.
        -       guid: J9H*D*cI=P
                topic: DFS
                front: Kompletnost a optimalita
                back: |
                        Není kompletní (může cyklit), nemusí najít optimum.<br>
        -       guid: FN*@j@Z=u9
                topic: DFS
                front: Prostorová složitost
                back: |
                        [$$]\\O(bm)[/$$]
        -       guid: N91{M7ho%*
                topic: DFS
                front: Časová složitost
                back: |
                        [$]\\O(b^m)[/$], kde [$]m[/$] je maximální hloubka.
                        (Délka cesty může být [$]d\\ll m[/$]...)
        -       guid: JK1Gsw~LSj
                front: Jaké vychytávky umí zlepšit paměťovou složitost DFS?
                back: |
                        Jestli dělám backtracking a generuju jenom jednoho
                        successora: [$]\\O(m)[/$].<br>
                        Modifikuj jenom tenhle stav:
                        [$]\\O(m)[/$] akcí, [$]\\O(1)[/$] stavů
        -       guid: e0`>~LE-ef
                front: Jak určit depth limit pro DFS?
                back: |
                        Vykoukat z problému (například, počet měst,
                        průměr grafu). Čím větší hloubku dovolím DFS, tím déle
                        bude trvat.
        -       guid: gj`|BHA7Ce
                front: Jak udělat z depth-limited search kompletní algoritmus?
                back: Iterative deepening
        -       guid: s8:mgpNdFu
                topic: Iterative deepening
                front: Kompletnost
                back: |
                        Ano, když je konečný branching faktor
        -       guid: i^v21}yKgd
                topic: Iterative deepening
                front: Optimalita
                back: Jenom jestli je cena cesty úměrná hloubce
        -       guid: w-7jA-Q)s0
                topic: Iterative deepening
                front: Spotřeba paměti
                back: |
                        [$]\\O(bd)[/$]
        -       guid: jyIyC`Jr4h
                topic: Iterative deepening
                front: Časová složitost
                back: |
                        [$]\\O(b^d)[/$] (BFS prozkoumá totiž ještě jeden level?)
        -       guid: y#2n3n0y#8
                front: |
                        Jakou metodu uninformed search použít když je velký
                        stavový prostor a neznám hloubku řešení?
                back: Iterative deepening
        -       guid: R5<MTqa||
                front: Bidirectional search
                back: |
                        2 searche zároveň: forward a backward.
                        [$]b^{d/2}+b^{d/2} \\ll b^d[/$].
                        <br>
                        Než expanduju node, prověřím že není ve druhém frontieru.
                        Jeden musím nechat v paměti (tedy [$]\\O(b^{d/2})[/$] na paměť).
                        Jestli použiju BFS, dostanu kompletní algoritmus.
                        (Ale první řešení pořád nemusí být optimální.)
        -       guid: cOB1/f(x5?
                front: Problém při zpětném prohledávání ve stavovém prostoru
                back: |
                        Když cíl je nějaká abstraktní funkce (např. 8-queens).
