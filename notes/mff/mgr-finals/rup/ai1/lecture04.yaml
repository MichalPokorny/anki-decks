deck: All::Magisterské státnice::Řešení úloh a plánování::AI1::Přednáška 4 (informované
        prohledávání)
notes:
        # AI lecture04eng
        -       guid: P<3iNaI2DG
                front: Algoritmy informovaného prohledávání
                back: B(est)FS, A*, IDA*, RBFS, SMA*
                markdown: false
        -       guid: GC,!-TI`ZX
                front: Jak budovat heuristiky pro informované prohledávání?
                back: Relaxace problému, pattern databases
        -       guid: PzukDIDzQx
                front: Funkce heuristické funkce
                back: |
                        Odhaduje délku nejkratší/nejlevnější cesty do cílového stavu.
                        Když [$]h(n)=0[/$], tak je to cíl.
        -       guid: pzxyC{={[T
                front: (Greedy) best-first search, optimalita?
                back: |
                        Jako první expanduj node, který má nejmenší vzdálenost do cíle.<br>

                        Nemusí najít optimální cestu.
        -       guid: P|<PpYu+qx
                front: Zkonstruuj příklad, kdy greedy best-first-search nenajde optimální
                        cestu.
                markdown: false
                back: |
                        <pre>
                             ___(100)___O____(10)___GOAL
                            /
                           O
                            \___(20)____O____(20)___GOAL
                        </pre>
        -       guid: lXIu/YfM/M
                front: Časová a paměťová složitost greedy best-first-search
                back: |
                        [$$]\\O(b^m), \\O(b^m)[/$$]
        -       guid: s0VLf~V!95
                front: Kompletnost greedy best-first-search
                back: |
                        Může cyklit. Musíme dělat prevenci cyklů.
        -       guid: z[S]zpzTWI
                markdown: false
                topic: A*
                front: Podle čeho prioritizuje A*?
                back: |
                        Podle [$]f(n)=g(n)+h(n)[/$], kde [$]g(n)[/$] je délka
                        cesty do [$]n[/$] z kořene
        -       guid: oY8HI2YTJu
                topic: A*
                front: |
                        Jaká heuristika je admisibilní?
                        Co to znamená pro [$]f(n)[/$]?
                back: |
                        $$]h(n)\\leq\\text{cena nejlevnější cesty z}\\ n\\ \\text{do cíle}[/$]
                        <br>
                        Tedy optimistický pohled, [$]f(n)[/$] je dolní odhad
                        na délku cesty do cíle skrz [$]n[/$].
        -       guid: mVJM7C6k[R
                topic: A*
                front: |
                        Jaká heuristika je monotónní/konzistentní?
                back: |
                        Ať je [$]n'[/$] následník [$]n[/$] skrz akci [$]a[/$].
                        Pak:
                        [$$]
                        h(n)\\leq c(n,a,n') + h(n')
                        [/$$]
                        Je to forma trojúhelníkové nerovnosti.
        -       guid: P<)1SEbDQ9
                topic: A*
                front: Vztah přípustných(admisibilních) a monotónních heuristik
                back: |
                        Monotónní heuristiky jsou admisibilní.
        -       guid: o,[=wFClvh
                topic: A*
                front: Důkaz, že každá monotónní heuristika je admisibilní
                back: |
                        Ať je [$]n_1,n_2,\\ldots n_k[/$] optimální cesta z
                        [$]n_1[/$] do cíle [$]n_k[/$].<br>
                        Monotonie: [$]h(n_i)-h(n_{i+1})\\leq c(n_i,a_i,n_{i+1})[/$].<br>
                        Teleskop: [$]h(n_1)\\leq\\sum_{i=1}^{k-1} c(n_i,a_i,n_{i+1})[/$]
        -       guid: xYWZsJ#P#L
                topic: A*
                front: Monotónní heuristiky a hodnoty [$]f(n)[/$]. Důkaz?
                back: |
                        Pro monotónní heuristiku hodnoty [$]f(n)[/$] na žádné cestě neklesají.<br>

                        Ať je [$]n'[/$] successor [$]n[/$], tedy [$]g(n')=g(n)+c(n,a,n')[/$].<br>

                        Pak: [$]f(n')=g(n')+h(n')=g(n)+c(n,a,n')+h(n')\\geq g(n)+h(n)=f(n)[/$]
        -       guid: 'Mdxw6M?BA:'
                topic: A*
                front: |
                        Jaké 2 grafové meta-algoritmy se liší a jak?
                        Co heuristiky?
                markdown: false
                back: |
                        <ul>
                        <li> <i>Tree-Search</i>: stačí admisibilní heuristika
                             aby byl A* optimální.
                        <li> <i>Graph-Search</i>: musí být monotónní.
                        </ul>
                        V Graph-Search jde jednoho vrcholu dosáhnout více
                        cestami, kde druhá může zkrátit první.
        -       guid: n5P{@K.WA~
                topic: A*
                markdown: false
                front: Kdy je A* optimální v Tree-Search? Důkaz.
                back: |
                        Když je [$]h(n)[/$] admisibilní heuristika.<br>

                        Ať je [$]G_2[/$] cíl, který je na fringe a [$]C^{ * }[/$] je optimální cost.<br>
                        Pak: [$]f(G_2)=\underbrace{g(G_2)+h(G_2)=g(G_2)}_{h(G_2)=0}>C{ * }[/$]<br>

                        Ať [$]n[/$] je node na fringe co leží na optimální cestě.
                        Pak: [$]f(n)=g(n)+h(n)\leq C^{ * }[/$], protože [$]h[/$] je admisibilní.<br>

                        Dohromady: [$]f(n)\leq C^{ * }>f(G_2)[/$].
                        Proto algoritmus nejdřív rozbalí [$]n[/$].
        -       guid: PZKZ{vi.T-
                topic: A*
                front: |
                        Kdy je A* optimální v Graph-Search? Důkaz.
                        Jak to řešit jinak?
                back: |
                        Když je heuristika monotónní.<br>

                        Můžu taky (zřejmě) vybrat z obou cest co vedou do
                        uzavírané cesty tu lepší, ale to chce extra
                        bookkeeping.<br>

                        Protože hodnoty [$]f(n)[/$] na žádné cestě neklesají
                        a expanduju vrchol co má [$]f(n)[/$] nejmenší,
                        tak mezi "otevřenými" cestami do [$]n[/$] nemůže
                        existovat žádná kratší než ta, co už znám.
                        Proto první uzavřený goal node je optimální.
        -       guid: bb1}HAkzs4
                topic: A*
                markdown: false
                front: |
                        A* a kontury a cesta do cíle.
                        Co jsou nody, které algoritmus za svůj běh expanduje?
                back: |
                        Pro neklesající [$]f(n)[/$] jdou nakreslit podle hodnot
                        [$]f(n)[/$].
                        Čím mám přesnější [$]h(n)[/$], tím jsou užší kolem
                        cesty do cíle<br>

                        Nody na kontuře co mají [$]f(n)<C^{ * }[/$] se
                        expandují, některé nody
                        s [$]f(n)=C^{ * }[/$] se můžou expandovat,
                        [$]f(n)>C^{ * }[/$] se neexpandují.<br>

                        A* je optimálně efektivní pro libovolnou
                        konzistentní heuristiku.
        -       guid: j%]X1RF8&w
                topic: A*
                front: Časová složitost a nejvyšší počet expandovaných nodů
                back: |
                        Až exponenciální
        -       guid: mTSIO7|^/
                topic: A*
                front: |
                        Jak neexpandovat exponenciální počet nodů?
                back: |
                        Když [$]|h(n)-h^{ * }(n)|\\leq \\O(\\log h^{ * }(n))[/$],
                        kde [$]h^{ * }[/$] je délka optimální cesty.
        -       guid: zX`0CYCO%5
                topic: A*
                front: Paměťová složitost
                back: |
                        Držím v paměti všechny expandované nody, je jich až
                        exponenciálně.
        -       guid: JT=6??#VKI
                topic: A*
                front: Bottleneck
                back: |
                        Paměť. Spotřebuje se jí stejně jako času a obvykle
                        dojde první.
        -       guid: G(8:m2;IMs
                topic: IDA*
                front: Zkratka
                markdown: false
                back: |
                        Iterative deepening A*
        -       guid: Q$|Ejvy1H_
                topic: IDA*
                front: Algoritmus
                back: |
                        Začnu s malým limitem na [$]f(n)[/$] (konkrétně
                        [$]f(\\text{kořen})[/$]. Pomocí DFS prohledám všechny
                        vrcholy, co mají nejvýše takové [$]f(n)[/$].<br>

                        Když nenaleznu řešení, tak zvýším limit na
                        nejmenší [$]f(n)[/$], které bylo nad limitem, a opakuju.
        -       guid: IFt8(}6Xdl
                topic: IDA*
                markdown: false
                front: Výhoda oproti A*
                back: |
                        Menší spotřeba paměti (je depth-first).
        -       guid: J|&_=>hlY)
                front: Recursive best-first search &mdash; algoritmus
                back: |
                        V každém volání si pamatuju odhady na délky optimálních
                        cest skrz successory.<br>

                        Odhady začnu jako [$]f(n')[/$].<br>

                        Rekurzivně se zavolám v successorovi, co má nejmenší
                        odhad.<br>

                        Jakmile zjistím, že exploruju, ale někde v mém předkovi
                        je slibnější podstrom, abortuju a jdu nahoru.
                        Po cestě nahoru probublám přesnější (vyšší)
                        odhad na délku cesty skrz současný podstrom.
        -       guid: I,=_etOB`(
                markdown: false
                front: Kdy je IDA* optimální?
                back: |
                        Když používá admisibilní heuristiku.
        -       guid: c2I}YI*LL%
                topic: Recursive best-first search
                front: Spotřeba paměti
                back: |
                        [$]\\O(bd)[/$]
        -       guid: tby.OYZW@<
                topic: Recursive best-first search
                front: Spotřeba času
                back: |
                        Exponenciální (excesivní regenerace)
        -       guid: e2e7.p6=At
                topic: SMA*
                front: Zkratka
                markdown: false
                back: |
                        Simplified memory-bounded A*

        -       guid: M.D-&sd]UP
                topic: SMA*
                front: Algoritmus
                markdown: false
                back: |
                        Pro vrcholy udržuj současný nejpřesnější odhad na délku
                        cesty skrz ně, jako v IDA*.<br>

                        Jako v A* expanduj node s nejmenším odhadem na
                        délku cesty do cíle skrz něj.<br>

                        Když dojde paměť, smaž nejhorší list; je-li jich víc,
                        smaž ten nejmíň hluboký. Jeho informace pošli nahoru.
        -       guid: J0&}k.Xf3~
                topic: SMA*
                front: Optimalita
                markdown: false
                back: |
                        Když má dost paměti na uložení nejlepší cesty (a
                        heuristika je admisibilní), SMA* najde v
                        tree-search nejlepší cestu.<br>
                        Když je málo paměti, najde nejlepší co se do paměti
                        vejde.
        -       guid: p8wXp*H.sa
                front: Příklady heuristik získaných relaxací 8-puzzle
                back: |
                        <ul>
                        <li> Počet špatně umístěných tilů.
                        <li> Součet vzdáleností tilů od jejich cílů
                             (Manhattan heuristika).
                        </ul>
        -       guid: Lc%zcaTC!*
                markdown: false
                front: Poměřování A* heuristik číselně
                back: |
                        Ať heuristika rozbalí [$]N[/$] nodů.
                        Porovnáváme [$]b^{ * }[/$], branching faktor
                        plného stromu co má [$]N+1[/$] nodů ([$]N+1=1+b^{ * }+\ldots+(b^{ * })^d[/$]).
        -       guid: A>8yjUMTfA
                front: |
                        Definice:
                        Heuristika [$]h_2[/$] dominuje heuristiku [$]h_1[/$]
                markdown: false
                back: |
                        [$] (\a n) h_2(n)\geq h_1(n)[/$]
        -       guid: M46nBjbX:?
                front: |
                        Jak se liší A* na dvojici heuristik,
                        kde jedna dominuje druhou?
                markdown: false
                back: |
                        A* na dominující heuristice expanduje nejvýše tolik
                        nodů jako na dominované.
                        Expanduje totiž nody, kde [$]f(n)<C^{ * }[/$], neboli
                        [$]h(n)<C^{ * }-g(n)[/$].
                        Když expanduje node pomocí dominující heuristiky,
                        expanduje ho i při dominované heuristice.
        -       guid: OPj7%R7r0,
                front: Kdy je lepší dávat dominující heuristiku?
                back: |
                        Vždy, když je admisibilní a nepočítá se moc dlouho.
        -       guid: cH;CEC~i(^
                front: Jak zkombinovat heuristiky co se navzájem nedominují?
                back: |
                        Vzít [$]\\max[/$], to je všechny dominuje.
        -       guid: G9xrCM5q&,
                front: |
                        Jak stavět heuristiky kromě relaxace?
                        Jak to implementovat?
                        Na co dát bacha?
                back: |
                        Pattern database.<br>

                        Například pro 8-puzzle: podívám se jenom kde je 1,2,3,4,
                        všechny ostatní přeznačím jako "?". Vyřeším problém
                        dostat na svoje místo 1,2,3,4.<br>

                        Heuristika: maximový čas na vyřešení všech patternů
                        co matchují současný stav.<br>

                        Bacha: součet cen patternů nemusí být admisibilní (řešení jednoho
                        patternu může pomoct k řešení druhého).
