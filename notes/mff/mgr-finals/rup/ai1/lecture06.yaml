deck: All::Magisterské státnice::Řešení úloh a plánování::AI1::Přednáška 6 (CSP)
topic: CSP
notes:
        # AI1 lecture06eng (CSP)
        -       guid: PZ$=.U]?5U
                front: |
                        Základní termíny
                back: |
                        Domény, proměnné, podmínky (různé arity), (filtrování).
        -       guid: Ly1=ZY;&&5
                front: |
                        Podle jakých heuristik budeme vybírat proměnnou
                        k dosazení?
                        Příklady?
                back: |
                        Fail-first.
                        <ul>
                        <li>*dom heuristika*: proměnná s nejmenší doménou
                        <li>*deg heuristika*: proměnná co má nejvíc podmínek
                        <li>*dom+deg heuristika*: mezi proměnnými s nejmenší
                            doménou vyber tu co má nejvíc podmínek
                        </ul>
        -       guid: b:E*p%BF9}
                front: |
                        Podle jakých heuristik budeme vybírat pořadí hodnot k dosazení?
                        Příklady?
                back: |
                        Succeed-first.<br>

                        Taková proměnná co nejméně omezí ostatní proměnné.<br>

                        Zkus problém zrelaxovat, najít řešení relaxovaného problému
                        a z něj vzít hodnotu.<br>

                        Problem-dependent heuristics.
        -       guid: e{X*+`nD^e
                front: Forward checking
                back: |
                        Po přiřazení zkontroluj constrainy mezi právě přiřazenou
                        proměnnou a budoucími proměnnými.
        -       guid: l,}-Mg{}1^
                front: Arc consistency
                back: |
                        Každá hrana má podporu &mdash; každá hodnota v každé
                        doméně má podporu na druhé straně podmínek.
                        Při každé změně uděláme další filtrování.
        -       guid: vAU_o<~v|=
                front: AC-3 algoritmus a časová složitost
                back: |
                        Měj queue všech hran.
                        Vyber hranu z queue.<br>

                        Pro hranu zkontroluj, že každé dosazení doleva má podporu vpravo.
                        (Kontrola trvá [$]d^2[/$].)<br>

                        Pokud jsem něco odebral, přidám všechny hrany
                        ze změněné domény do queue.<br>

                        Složitost: [$]\\O(ed^3)[/$], kde [$]e[/$] je
                        počet podmínek.
        -       guid: e,Xku4yC@u
                front: |
                        [$]k[/$]-konzistence - definice
                back: |
                        Když pro každé konzistentní přiřazení [$] (k-1)[/$]
                        proměnných ho umíme rozšířit o další proměnnou
        -       guid: Hqz_RA!bx[
                front: |
                        [$]k[/$]-konzistence a řešení bez backtracků
                back: |
                        Jestli je problém [$]k[/$]-konzistentní pro [$]k\\in\\{1,\\ldots n\\}[/$],
                        jde vyřešit bez backtracků.
        -       guid: 'e}J0{-^k#:'
                front: Časová složitost [$]k[/$]-konzistence
                back: |
                        Exponenciální v [$]k[/$]
        -       guid: p*R1CmFf}$
                front: Globální podmínky a příklad
                back: |
                        Obalují podproblém - například <code>all_different</code>
                        obaluje párování v bipartitním grafu
        -       guid: h>OTZS[O%j
                front: Jak optimalizovat v CSP?
                back: Branch and bound
