deck: All::Magisterské státnice::Řešení úloh a plánování::Plánování a rozvrhování::Přednáška
        9
topic: Plánovací heuristiky
notes:
        # planovani lecture09
        -       guid: pujuXK=e/5
                front: Jak zlepšit efektivitu plánovacích algoritmů?
                back: |
                        <ul>
                        <li><i>Heuristiky</i>: problémově závislí průvodci
                        <li><i>Řídící pravidla</i>: problémově závislé
                            prořezávání stavů
                        <li><i>Heuristické plánování</i>: problémově závislé
                            návody na řešení úloh
                        </ul>
        -       guid: g<UpWeh|v;
                front: Co po nich chceme?
                back: |
                        Aby vybraly uzel co nejblíž orákulu (které by problém
                        řešilo deterministicky) a efektivně se počítaly.
        -       guid: y9g6@XaprQ
                front: Jak je stavět?
                back: |
                        Relaxací problému
        -       guid: MY:pRsnY@.
                front: |
                        Jak vypadají optimalizační heuristiky?
                        Kdy jsou přípustné?
                markdown: false
                back: |
                        [$]h(u)[/$] odhaduje [$]h^*(u)[/$] (cenu nejlepšího
                        řešení).
                        Přípustné heuristiky: když [$]h(u)\leq h^*(u)[/$]
                        (pro minimalizaci ceny).
        -       guid: uT,,P[EQuy
                front: Jak konstruovat heuristiky pro plánování se stavy?
                back: |
                        Odhadují počet akcí z daného stavu do cíle.
                        <br><br>
                        Vyřešíme relaxovaný problém: uvažujeme jenom pozitivní
                        efekty, předpokládáme že různé atomy se dosahují
                        nezávisle na sobě.
        -       guid: rv3i4:4K[?
                markdown: false
                front: Heuristika [$]\Delta_0[/$]
                back: |
                        <ul>
                        <li>[$]p\in S\longrightarrow \Delta_0(S,p)=0[/$]
                        <li>[$]g\subseteq S\longrightarrow \Delta_0(S,g)=0[/$]
                        <li>[$](p\notin S, \nexists a\in A: p\in \mathrm{eff}^+(a))
                               \longrightarrow \Delta_0(S,p)=\infty[/$]
                        <li>[$]\Delta_0(S,p)=\min_a
                               \{1+\Delta_0(S, \mathrm{pre}(a)) :
                                       p\in\mathrm{eff}^+(a)\}[/$]
                        <li>[$]\Delta_0(S,g)=\sum_{p\in g}\Delta_0(S,p)[/$]
                        </ul>
                        Není přípustná &mdash; není dolní odhad délky plánu.
        -       guid: wMBHaiL-zO
                front: Heuristika [$]\\Delta_1[/$]
                back: |
                        [$]\\Delta_1(S,g)=\\max\\{\\Delta_0(S,p) : p\\in g\\}[/$]
                        <br><br>
                        Když je [$]\\Delta_1[/$] větší než nejlepší
                        známé řešení, můžeme bezpečně uříznout větev.
                        Ale méně informovaná než [$]\\Delta_0[/$].
        -       guid: A-N*mM0SVS
                front: Heuristika [$]\Delta_2[/$]
                markdown: false
                back: |
                        Dosažitelnost dvojice atomů najednou:
                        <ul>
                        <li>
                        [$$]\Delta_2(S,p)=\min_a \{1+\Delta_2(S, \mathrm{pre}(a)) : p\in\mathrm{eff}^+(a)\}[/$$]
                        <li>
                        [$$]
                        \Delta_2(S,\{p,q\})= 1 + \min_a \left\{
                          \begin{cases}
                            \Delta_2(S, \mathrm{pre}(a))          & \{p,q\}\subseteq \mathrm{eff}^+(a) \\
                            \Delta_2(S, \{q\}\cup\mathrm{pre}(a)) & p\in\mathrm{eff}^+(a) \\
                            \Delta_2(S, \{p\}\cup\mathrm{pre}(a)) & q\in\mathrm{eff}^+(a) \\
                            \infty & \text{otherwise}
                          \end{cases}
                        \right\}
                        [/$$]
                        </ul>
                        Jde zobecnit, ale pro [$]k>2[/$] je složitost moc
                        velká.
        -       guid: kWGN6c#!a+
                front: Souvislost [$]\\Delta_2[/$] s Graphplan
                back: |
                        Graphplan: navíc mutexy.
                        Můžu ji přizpůsobit víc tím, že když vyrobím dvojici
                        atomů přes dvě nezávislé akce, budu to považovat
                        za jeden krok.
        -       guid: kgV?[NY#@x
                front: Heuristiky při dopředném plánování
                back: |
                        Vyber akci, co minimalizuje heuristickou vzdálenost
                        do cíle.
        -       guid: xAoGGV.,i&
                front: Heuristiky při zpětném plánování
                back: |
                        Na úvod vypočtu heuristické vzdálenosti
                        z [$]s_0[/$] do všech atomů: [$]\\Delta(s_0,p)[/$].
                        (Můžu inkrementálně upravovat.)
                        Preferuju akce, jejichž předpoklady jsou heuristicky
                        blíž počátku.
        -       guid: x~lULC`X5a
                front: Heuristika volby kazu k opravě v plánování s plány
                back: |
                        **FAF** - fewest alternatives first. První oprav
                        kaz, co má nejmíň způsobů opravy.
        -       guid: 'fsqUATw?{:'
                front: |
                        Heuristika způsobu opravy kazu v plánování
                        s plány
                back: |
                        Podívej se na opravy.
                        <ol type="1">
                        <li> Preferuj plán co má míň otevřených cílů.
                        To ale není korelované se složitostí, jak jich dosáhnout...
                        [$]\\eta_0(\\pi)=|g_\\pi|[/$]
                        <li> Vygenerujeme AND-OR graf pro [$]\\pi[/$]
                        do dané hloubky a spočítáme počet nových akcí v grafu
                        a počet otevřených cílů, co nejsou v [$]s_0[/$]:
                        [$]\\eta_k(\\pi)[/$]. Hodně výpočetně náročné.
                        <li> Uděláme (stačí jednou) plánovací graf pro
                        původní cíl. Najdeme otevřený cíl [$]p[/$] v [$]\\pi[/$],
                        co se přidal do grafu jako poslední, na cestě
                        [$]s_0\\rightarrow p[/$] spočítáme počet akcí,
                        co nejsou v [$]\\pi[/$]: [$]\\eta(\\pi)[/$]
                        </ul>
        -       guid: HbfZP@zUn_
                topic: Simple temporal logic
                front: |
                        [$]\\Phi_1\\cup \\Phi_2[/$]
                back: |
                        <h3>Až do</h3>
                        [$]\\Phi_2[/$] platí teď nebo v některém příštím stavu,
                        [$]\\Phi_1[/$] platí do té doby
                include_reverse: true
        -       guid: dB*KgEyO|9
                topic: Simple temporal logic
                front: |
                        [$]\\square\\Phi[/$]
                back: |
                        [$]\\Phi[/$] platí teď a v každém z příštích stavů
                include_reverse: true
        -       guid: jh?8F;q[V?
                topic: Simple temporal logic
                front: |
                        [$]\\diamond\\Phi[/$]
                back: |
                        [$]\\Phi[/$] platí teď nebo v některém z příštích stavů
                include_reverse: true
        -       guid: lkeW},Au{i
                topic: Simple temporal logic
                front: |
                        [$]\\circ\\Phi[/$]
                back: |
                        [$]\\Phi[/$] platí v následujícím stavu
                include_reverse: true
        -       guid: gfJ{#j@^L~
                topic: Simple temporal logic
                front: |
                        [$]\\mathrm{GOAL}(\\Phi)[/$]
                back: |
                        [$]\\Phi[/$] (která nesmí mít modální operátory) platí v cílovém stavu
                include_reverse: true
        -       guid: N_ikn%u1!U
                topic: Simple temporal logic
                front: Jak interpretujeme formule?
                back: |
                        [$] (S,s_i,g)[/$]: [$]S[/$] nekonečná posloupnost
                        stavů, [$]s_i\\in S[/$] aktuální stav,
                        [$]g[/$] je cílová formule.
                        <br><br>
                        [$] (S,s_i,g)\\models\\varphi[/$] definujeme
                        rekurzivně.
        -       guid: bA8[BY0/L.
                front: Jak postavit řídící pravidlo pro svět kostek
                back: |
                        [$]goodtower[/$] pro kostku, když pod ní všechno
                        je tak, jak má být podle zadání,
                        postaveno logikou prvního řádu
                        <br><br>
                        Řídící pravidlo: pomocí [$]\\circ[/$]: nedávej nic
                        na bad towers; nerozbíjej goodtowery; neber kostky
                        ze stolu když nejdou dát na goodtower
        -       guid: kUu39s!}`s
                topic: Simple temporal logic
                front: Jak uděláme progress o jeden stav dál?
                back: |
                        Rekurzivně; progrese [$]\a, \e[/$]:
                        vyjmenování (closed world assumption).
                        Vyjmenujeme, jak progresovat modální operátory.
        -       guid: Q~GCwiFHUF
                front: Řízené plánování
                back: |
                        Postupně progressem upravuj řídící formuli
                        pro další stavy. Pokud hlásí neúspěch,
                        neexistuje tam plán, co by splnil pravidlo.
