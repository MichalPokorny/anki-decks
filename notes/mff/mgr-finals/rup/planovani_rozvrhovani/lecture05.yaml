deck: All::Magisterské státnice::Řešení úloh a plánování::Plánování a rozvrhování::Přednáška
        5
topic: Plánování s plánovacím grafem
notes:
        # planovani a rozvrhovani lecture05
        -       guid: DdGqgk<zm0
                front: Problémy hledání v prostoru plánů a stavů a jak je vyřeší plánování
                        s grafem
                back: |
                        Když vyberu špatnou akci, projeví se to pozdě.
                        Máme taky velký větvící faktor.<br>

                        Budeme řešit relaxovaný problém (odstraníme např. negativní efekty).
                        Při výběru akce budeme zkoušet jenom akce z řešení relaxace.
        -       guid: nX-%n/TSZD
                front: Základní myšlenky plánování s grafem
                back: |
                        <ul>
                        <li>
                        *Strategie silných závazků*: akce jsou plně instanciovány
                        a zvoleno jejich místo v plánu.
                        <li>
                        *Analýza dosažitelnosti*: zjišťujeme jestli nějakého
                        stavu můžu dosáhnout v nějakém počtu kroků.
                        <li>
                        *Disjunktivní zjemňování*: kazy opravíme použitím
                        disjunkce rozkladů, zachycením interferencí rozkladů
                        formou omezení
                        </ul>
        -       guid: jG;i%qHY<;
                front: Graf dosažitelnosti  a jaký je s ním problém
                back: |
                        Vrchol: stav, hrana: akce.
                        Je neprakticky velký.
        -       guid: J?eA_DtqG!
                front: Jakou podmínku na dosažitelnost poskytuje plánovací graf?
                back: |
                        Nutnou: je-li stav dosažitelný, vyskytuje se v plánovacím grafu.
                        (Ne všechny stavy v plánovacím grafu jsou skutečně dosažitelné.)
        -       guid: N[kwM</@YW
                front: Jak plánovací graf aproximuje stavy?
                back: |
                        Aproximace je sjednocení atomů ve všech stavech dosažitelných
                        na dané úrovni.
                        <br>
                        Na daný stav aplikuje paralelně všechny použitelné akce
                        a ignorujeme negativní efekty. Vyznačíme si, která akce
                        byla odpovědná přidání kterého atomu, a který atom
                        by chtěla smazat.
        -       guid: zS-pivv232
                front: Vrstvy, úrovně a hrany plánovacího grafu
                back: |
                        Vrstva: buď instanciované atomy, nebo akce<br>
                        Nultá vrstva: počáteční stav; poslední vrstva je stavová.<br>
                        Akční vrstva a další stavová vrstva: *úroveň*<br>
                        Hrany: z atomů do akcí, pro které jsou předpoklady.
                        Z akce do atomů popisujících efekty. (Hrany pro negativní
                        efekty jsou označeny zvlášť, negativní efekty se nemažou ze stavu.)
        -       guid: H|<%^R$vf9
                front: Vrstvený plán
                back: |
                        Z plánovacího grafu vypadne vrstvený plán,
                        co má několik vrstev akcí.
                        Sekvenční plán z toho udělám tak, že libovolně zpermutuju
                        každou vrstvu a pak to spojím.
        -       guid: l!c,V*A?o+
                front: Nezávislost akcí a proč se bude hodit
                back: |
                        Akce jsou závislé, když jedna maže předpoklad nebo
                        pozitivní efekt druhé.<br>
                        Nezávislé:
                        [$]\\mathrm{eff}^-(a)\\cap(\\mathrm{precond}(b)\\cup\\mathrm{eff}^+(b))=\\emptyset[/$]
                        a obráceně.<br>
                        Každá vrstva vrstveného plánu se bude skládat z nezávislých
                        akcí (aby šly libovolně uspořádat).
                        Aplikace množiny nezávislých akcí nezáleží na jejich pořadí.
        -       guid: Dw`U3j_|jd
                front: Čím je určena nezávislost akcí?
                back: Doménou &mdash; nikoli konkrétním problémem
        -       guid: xPB-!k_xT5
                front: Použitelnost, výsledek aplikace množiny nezávislých akcí
                back: |
                        *Použitelnost*: všechny předpoklady jsou splněny<br>
                        *Výsledek aplikace*: odeberu negativní efekty a přidám
                        pozitivní. Na permutaci nesejde.
        -       guid: zd7b#]!KC_
                front: Jak budeme plánovat s plánovacím grafem?
                back: |
                        Sestrojíme graf, ve kterém poslední vrstva splňuje
                        cíl.<br>
                        Z akčních vrstev vybereme množiny nezávislých akcí,
                        abychom dostali všechny cílové atomy.
                        To uděláme zpětným chodem od poslední úrovně.
                        <br>
                        Přidáme no-op akce.
        -       guid: q2:nY=^9E/
                front: |
                        Značení: No-op akce
                back: |
                        [$]\\alpha_p[/$] pro atom [$]p[/$]
        -       guid: M+,O(UJ*jH
                front: Účel no-op akcí
                back: |
                        Aby každý atom v každé stavové vrstvě byl důsledkem
                        nějaké akce předchozí úrovně.
        -       guid: qOzRd}H|qm
                front: Jaké věci tvoří mutexy?
                back: |
                        Nultá vrstva: všechny atomy jsou dohromady.<br>
                        První akční vrstva nesmí obsahovat dvě závislé akce,
                        takže jejich pozitivní efekty nemůžou být v první
                        stavové vrstvě (když jich nejde dosáhnout bez
                        závislosti).<br>
                        Jako speciální případ podmínky pro no-opy
                        [$]\\alpha_p[/$]:
                        2 atomy nesmí být společně v jedné vrstvě, jestli
                        jsou pozitivní předpoklad a negativní efekt téže akce.
                        <br>
                        Dvě akce jsou nekompatibilní, pokud jsou jejich
                        předpoklady nekompatibilní. Akce, jejichž předpoklady
                        jsou mutex, můžeme rovnou vyřadit.
        -       guid: H&-?K;9^pP
                front: |
                        Značení: Množina akčních mutexů pro úroveň [$]i[/$]
                back: |
                        [$]\\mu A_i[/$]
        -       guid: tlZQ]`9?}s
                front: |
                        Značení: Množina výrokových mutexů pro úroveň [$]i[/$]
                back: |
                        [$]\\mu P_i[/$]
        -       guid: bb6`@4,d;{
                front: |
                        Formálně: Kdy platí mutex akcí &mdash;
                        [$] (a, b)\\in\\mu A_i[/$]?
                back: |
                        [$]a,b[/$] závislé, nebo
                        [$]\\e p\\in\\mathrm{precond}^+(a),
                               q\\in\\mathrm{precond}^+(b):
                           (p,q)\\in\\mu P_{i-1}[/$]
        -       guid: p*a&UvP=5e
                front: |
                        Formálně: Kdy platí mutex atomů &mdash;
                        [$](p,q)\\in\\mu P_i[/$]?
                back: |
                        [$]\\a a\\neq b: p\\in\\mathrm{eff}^+(a),
                                         q\\in\\mathrm{eff}^+(b):
                           (a,b)\\in\\mu A_{i-1}[/$]
                        a [$]\\nexists a: p\\in\\mathrm^{eff}^+(a)\\wedge
                                          q\\in\\mathrm^{eff}^+(a)[/$].
        -       guid: lV*;>JS&r!
                front: |
                        Vlastnosti relace mutex a důkaz;
                        důsledky pro akce a výroky ve vrstvách
                back: |
                        Symetrická.<br>
                        Mutexy v grafu monotónně klesají:
                        když [$]p,q\\in P_{i-1}[/$] a [$] (p,q)\\not\\in\\mu P_{i-1}[/$],
                        tak [$] (p,q)\\not\\in\\mu P_i[/$] a podobně s akcemi.<br>
                        Důkaz: 2 výroky nejsou mutex &rarr; jejich no-opy
                        taky nejsou mutex, posunou je dál.
                        2 akce nejsou mutex &rarr; jsou nezávislé a
                        předpoklady nejsou mutex &rarr; můžu no-opy
                        přemístit předpoklady dál a pustit akce později.
                        <br>
                        Důsledek: množiny akcí a výroků monotónně rostou
        -       guid: zDHK&f)i+R
                front: Technické omezení
                back: Akce nesmí mít negativní předpoklady
        -       guid: Lui/Br3}1;
                front: Algoritmus
                back: |
                        Střídám expanzi grafu a extrakci plánu.
                        <ul>
                        <li> *Expanze*: expanduj plánovací graf dokud nemáš
                        všechny cílové atomy kde žádná dvojice není mutex
                        (nutná podmínka).
                        <li> Extrakce neuspěje? Přidej vrstvu.
                        (Případně: konec když se splní např. max. počet kroků.)
                        <li> *Extrakce*: zkus vybrat z grafu plán do cíle
                        </ul>
        -       guid: x^M%oT8-YE
                front: Jak poznám pevný bod, k čemu je?
                back: |
                        Od pevného bodu nemusíš dál expandovat, stačí kopírovat.
                        V pevném bodě přestanou růst dostupné atomy/akce, resp.
                        klesat mutexy atomů/akcí.
        -       guid: je#qEETqiL
                front: Jak provést extrakci plánu? Instance čeho to je?
                back: |
                        Zpětně od poslední úrovně.
                        <br>
                        Nejdřív najdu množinu akcí [$]\\pi_i\\subseteq A_i[/$] co
                        nejsou mutex a vedou k cílovým atomům.
                        <br>
                        Pustím akce na zpětný chod a řeším jejich předpoklady.
                        <br>
                        Jestli to nejde, backtrackuju k volbě jiného [$]\\pi_i[/$].
                        <br><br>
                        Je to instance prohledávání AND/OR grafu.
        -       guid: gvm^x_;*eJ
                front: Co je a k čemu je nogood množina?
                back: |
                        Nogood množina: množina výroků co je jako celek
                        nekompatibilní. Pro každou vrstvu si pamatuj
                        tabulku nesplnitelných cílů.
                        <br>
                        Zrychluje a zajišťuje konečnost.
        -       guid: j<N@mGmEeu
                front: Jak zjistit, že neexistuje plán?
                back: |
                        Když jsi za fixpointem, přidáš vrstvu a v nové
                        vrstvě je po pokusu o extraci plánu stejně
                        nogoodů.
        -       guid: f_*8(9_Mn`
                front: Trik na lepší správu paměti
                back: |
                        Nebudovat explicitně vrstvy, jen pro každý
                        atom a akci uložit, kde byla poprvé (kvůli monotonii).
        -       guid: GPcdqp<XNr
                front: Jakými heuristikami můžu líp prohledávat?
                back: |
                        <ul>
                        <li>
                        První řeš atomy co mají málo "podpůrných akcí",
                        nebo se objevily později.
                        <li>
                        Preferuj no-opy nebo akce, co se objevily nejdřív.
                        <li>
                        Po výběru akce pro zbylé atomy kontroluj,
                        jestli pořád mají podporující akce
                        (kontrola dopředu).
                        </ul>
