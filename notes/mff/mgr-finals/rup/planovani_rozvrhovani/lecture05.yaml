deck: All::Magisterské státnice::Řešení úloh a plánování::Plánování a rozvrhování::Přednáška 5
topic: Plánování s plánovacím grafem
notes:
        # planovani a rozvrhovani lecture05
        -
                uuid: 96718524-64fb-4d49-a711-1ce1cc991377
                front: Problémy hledání v prostoru plánů a stavů a jak je vyřeší plánování s grafem
                back: >
                        Když vyberu špatnou akci, projeví se to pozdě.
                        Máme taky velký větvící faktor.<br>

                        Budeme řešit relaxovaný problém (odstraníme např. negativní efekty).
                        Při výběru akce budeme zkoušet jenom akce z řešení relaxace.
        -
                uuid: 997a5411-4702-440b-9de1-dc7797639962
                front: Základní myšlenky plánování s grafem
                back: >
                        Strategie silných závazků: akce jsou plně instanciovány
                        a zvoleno jejich místo v plánu.<br>

                        Analýza dosažitelnosti: zjišťujeme jestli nějakého
                        stavu můžu dosáhnout v nějakém počtu kroků.<br>

                        Disjunktivní zjemňování: kazy opravíme použitím
                        disjunkce rozkladů, zachycením interferencí rozkladů
                        formou omezení
        -
                uuid: f1407f01-3c70-451e-9592-2ee55275b59c
                front: Graf dosažitelnosti  a jaký je s ním problém
                back: >
                        Vrchol: stav, hrana: akce.
                        Je neprakticky velký.
        -
                uuid: bf128a9c-baf9-413b-a7f4-93908f9f3b93
                front: Jakou podmínku na dosažitelnost poskytuje plánovací graf?
                back: >
                        Nutnou: je-li stav dosažitelný, vyskytuje se v plánovacím grafu.
                        (Ne všechny stavy v plánovacím grafu jsou skutečně dosažitelné.)
        -
                uuid: 9f2cdd79-51fd-407b-92e6-b7ab2fa7696a
                front: Jak plánovací graf aproximuje stavy?
                back: >
                        Aproximace je sjednocení atomů ve všech stavech dosažitelných
                        na dané úrovni.
                        <br>
                        Na daný stav aplikuje paralelně všechny použitelné akce
                        a ignorujeme negativní efekty. Vyznačíme si, která akce
                        byla odpovědná přidání kterého atomu, a který atom
                        by chtěla smazat.
        -
                uuid: c2a7dc3f-2057-4ead-a90b-ad97b16258eb
                front: Vrstvy, úrovně a hrany plánovacího grafu
                back: >
                        Vrstva: buď instanciované atomy, nebo akce<br>
                        Nultá vrstva: počáteční stav; poslední vrstva je stavová.<br>
                        Akční vrstva a další stavová vrstva: *úroveň*<br>
                        Hrany: z atomů do akcí, pro které jsou předpoklady.
                        Z akce do atomů popisujících efekty. (Hrany pro negativní
                        efekty jsou označeny zvlášť, negativní efekty se nemažou ze stavu.)
        -
                uuid: fe2f858e-a96f-478a-82f0-0412a359760d
                front: Vrstvený plán
                back: >
                        Z plánovacího grafu vypadne vrstvený plán,
                        co má několik vrstev akcí.
                        Sekvenční plán z toho udělám tak, že libovolně zpermutuju
                        každou vrstvu a pak to spojím.
        -
                uuid: a9fc6961-06ce-48a3-9c9c-c82e2f56a590
                front: Nezávislost akcí a proč se bude hodit
                back: >
                        Akce jsou závislé, když jedna maže předpoklad nebo
                        pozitivní efekt druhé.<br>
                        Nezávislé: [$]\\mathrm{eff}^-(a)\\cap(\\mathrm{precond}(b)\\cup\\mathrm{eff}^+(b))=\\emptyset[/$]
                        a obráceně.<br>
                        Každá vrstva vrstveného plánu se bude skládat z nezávislých
                        akcí (aby šly libovolně uspořádat).
                        Aplikace množiny nezávislých akcí nezáleží na jejich pořadí.
        -
                uuid: 5416283c-eafd-42f5-8ebd-b48bf1061db9
                front: Čím je určena nezávislost akcí?
                back: Doménou -- nikoli konkrétním problémem
        -
                uuid: 7dd3d00d-d9d9-418c-9232-acf1bfc58283
                front: Použitelnost, výsledek aplikace množiny nezávislých akcí
                back: >
                        Použitelnost: všechny předpoklady jsou splněny<br>
                        Výsledek aplikace: odeberu negativní efekty a přidám pozitivní.
                        Na permutaci nesejde.
        -
                uuid: f099651f-f287-4222-9343-0b0e83a8a095
                front: Jak budeme plánovat s plánovacím grafem?
                back: >
                        Sestrojíme graf, ve kterém poslední vrstva splňuje cíl.<br>
                        Z akčních vrstev vybereme množiny nezávislých akcí,
                        abychom dostali všechny cílové atomy.
                        To uděláme zpětným chodem od poslední úrovně.
                        <br>
                        Přidáme no-op akce.
        -
                uuid: 61cbf4d3-7e8e-4621-84dd-d0ff37be22d6
                front: K čemu jsou no-op akce?
                back: >
                        No-op akce: [$]\\alpha_p[/$] pro atom [$]p[/$].<br>
                        Aby každý atom v každé stavové vrstvě byl důsledkem nějaké
                        akce z předchozí úrovně.
        -
                uuid: 28f854a0-fbdc-4e51-90d6-3076eda605df
                front: Jaké věci tvoří mutexy?
                back: >
                        Nultá vrstva: všechny atomy jsou dohromady.<br>
                        První akční vrstva nesmí obsahovat dvě závislé akce,
                        takže jejich pozitivní efekty nemůžou být v první
                        stavové vrstvě (když jich nejde dosáhnout bez
                        závislosti).<br>
                        Jako speciální případ podmínky pro no-opy [$]\\alpha_p[/$]:
                        Dva atomy nesmí být společně v jedné vrstvě, jestli
                        jsou pozitivní předpoklad a negativní efekt téže akce.
                        <br>
                        Dvě akce jsou nekompatibilní, pokud jsou jejich
                        předpoklady nekompatibilní. Akce, jejichž předpoklady
                        jsou mutex, můžeme rovnou vyřadit.
        -
                uuid: c18d9c2e-d180-4249-8989-81c61eb62d37
                front: Značení - množina akčních mutexů pro úroveň [$]i[/$]
                back: >
                        [$]\\mu A_i[/$]
        -
                uuid: 2c9e505f-76a8-48ee-9c88-c6871538d4ce
                front: Značení - množina výrokových mutexů pro úroveň [$]i[/$]
                back: >
                        [$]\\mu P_i[/$]
        -
                uuid: 321aba0e-8fdf-4268-9026-a5a54a16ddb2
                front: Formálně -- kdy jsou dvě akce [$]a[/$], [$]b[/$] mutex v úrovni [$]A_i[/$]?
                back: >
                        Když jsou závislé, nebo předpoklad [$]a[/$] je mutex předpokladu [$]b[/$] v předchozí úrovni
        -
                uuid: 36a1ee65-bb8c-4a9d-b779-c19ffad853ec
                front: Formálně -- kdy jsou dva atomy (výroky) mutex v úrovni [$]P_i[/$]?
                back: >
                        Když každá akce v [$]A_i[/$], která má [$]p[/$] jako pozitivní
                        efekt, je mutex každé akce, co má [$]q[/$] jako pozitivní efekt,
                        a zároveň žádná akce nemá [$]p[/$] i [$]q[/$] jako pozitivní efekt.
        -
                uuid: 976eed74-747c-46dd-8348-649cdfa8f1e6
                front: Vlastnosti relace mutex a důkaz; důsledky pro akce a výroky ve vrstvách
                back: >
                        Je symetrická.<br>
                        Množiny mutexů v grafu monotónně klesají:
                        když [$]p,q\\in P_{i-1}[/$] a [$] (p,q)\\not\\in\\mu P_{i-1}[/$],
                        tak [$] (p,q)\\not\\in\\mu P_i[/$] a podobně s akcemi.<br>
                        Důkaz: Když dva výroky nejsou mutex, tak jejich no-op
                        akce taky nejsou mutex a proto je přesunou dál.
                        Když dvě akce nejsou mutex, jsou nezávislé a jejich
                        předpoklady nejsou mutex, takže můžu přes no-opy
                        přemístit předpoklady dál a pustit akce později.
                        <br>
                        Důsledek: množiny akcí a výroků monotónně rostou
        -
                uuid: c794b243-d794-499c-9d55-652dcb61f563
                front: Technické omezení algoritmu Graphplan
                back: Akce nesmí mít negativní předpoklady
        -
                uuid: 8fd62631-d71c-4bf8-832a-1d47bd68c37f
                front: Algoritmus Graphplan
                back: >
                        Střídám fáze expanze grafu a extrakce plánu.
                        <br>
                        Expanze: expanduj plánovací graf dokud nemáš všechny
                        cílové atomy kde žádná dvojice není mutex (nutná podmínka).
                        Pokud fáze extrakce neuspěje, přidej další vrstvu.
                        (Případně se zastav když je splněna nějaká podmínka,
                        třeba max. počet kroků.)
                        <br>
                        Extrakce: pokus se vybrat z grafu plán co vede co cíle.
        -
                uuid: 9a9985e8-f156-48f6-9e36-fce5d1dcc1be
                front: Jak poznám pevný bod plánovacího grafu a k čemu je?
                back: >
                        Od pevného bodu nemusíme dál expandovat, stačí kopírovat.
                        V pevném bodě přestanou růst dostupné atomy/akce, resp.
                        klesat mutexy atomů/akcí.
        -
                uuid: c4f9f83a-0482-4812-8ce8-0789a7981bcc
                front: Jak se provádí extrakce plánu? Instance čeho to je?
                back: >
                        Zpětně od poslední úrovně.
                        <br>
                        Nejdřív najdu množinu akcí [$]\\pi_i\\subseteq A_i[/$] co
                        nejsou mutex a vedou k cílovým atomům.
                        <br>
                        Pustím akce na zpětný chod a řeším jejich předpoklady.
                        <br>
                        Jestli to nejde, backtrackuju k volbě jiného [$]\\pi_i[/$].
                        <br><br>
                        Je to instance prohledávání AND/OR grafu.
        -
                uuid: a8f24dea-4bcf-4916-a3a2-97571c18abfe
                front: Co je a k čemu je nogood množina?
                back: >
                        Nogood množina: množina výroků co je jako celek nekompatibilní.
                        Pro každou vrstvu si můžu pamatovat tabulku nesplnitelných
                        cílů pro tuhle množinu.
                        <br>
                        Zrychluje a zajišťuje konečnost.
        -
                uuid: 345e41f0-c974-4196-ae28-d93db92bba03
                front: Jak můžu zjistit, že neexistuje plán?
                back: >
                        Když jsem za fixpointem, přidám vrstvu, a v nové
                        vrstvě bude po pokusu o extraci plánu stejně velká
                        množina nogoodů.
        -
                uuid: d4500262-276a-4827-be18-1cda09c4b05d
                front: Trik na lepší správu paměti
                back: >
                        Nebudu si explicitně budovat vrstvy, jenom si pro každý
                        atom a akci uložím, kde byla poprvé (kvůli monotonii).
        -
                uuid: 1524608d-e166-4a82-b431-6ef322242a6c
                front: Jakými heuristikami můžu líp prohledávat?
                back: >
                        Nejdřív vybírej atomy co mají menší počet "podpůrných akcí",
                        nebo atomy, co se v grafu objevily nejpozději.
                        <br>
                        Při výběru akce preferuj no-opy nebo akce, co se
                        objevily v grafu nejdřív.
                        <br>
                        Po výběru akce pro zbývající atomy kontrolujeme,
                        jestli pořád mají některé podporující akce
                        (kontrola dopředu).
