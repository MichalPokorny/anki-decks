deck: All::Magisterské státnice::Reprezentace znalostí::AI1::Přednáška 9
notes:
        # AI1 lecture09eng
        -       guid: C6J4YU(:,u
                front: Co udělám s kvantifikátory když budeme dělat inferenci nad
                        predikátovou logikou?
                back: Skolemizace (přidám funkční symboly)
        -       guid: r?uYe^csh3
                front: Redukce predikátové logiky do výrokové logiky
                back: |
                        Vyrobím instance všech termů.
                        Z atomických sentencí udělám výrokové proměnné.
                        Z existenčních kvantifikátorů udělám novou konstantu.
                        Pro univerzální kvantifikátor substituuji všechny termy.
        -       guid: cM>dSSv^J(
                front: Herbrandtova věta (krátce z AI1)
                back: |
                        Jestli se něco dá dokázat v predikátové logice,
                        jde to dokázat z konečné podmnožiny výrokové konverze.
        -       guid: P>,9AUgw%E
                front: Liftovaný modus ponens a substituce
                markdown: false
                back: |
                        [$]p_1,\ldots,p_2,
                           q_1\wedge q_2\wedge\ldots\wedge q_n\rightarrow q
                           \Longrightarrow \mathrm{subst}(\Theta,q)[/$],
                        kde [$]\Theta[/$] je substituce že
                        [$]\mathrm{subst}(\Theta,p_i)=\mathrm{subst}(\Theta,q_i)[/$]
                        <br>
                        Funguje na Hornovské klauzule.
        -       guid: L-~k`yk.l)
                front: Hledání MGU (most general unifier), přibližný algoritmus
                back: |
                        Existuje právě jedna (až na přejmenování proměnných).<br><br>

                        Vstupy: x, y a zatím vybudovaná substituce.
                        x i y: proměnná/konstanta/seznam/term.<br><br>

                        Jestli jsou x=y, vrať.<br>
                        Jsou-li jedno z toho proměnné, udělej unifikaci proměnných.<br>
                        Jsou-li oba compoundy, musí mít stejné operace a unifikuj seznamy.<br>
                        Jsou-li oba seznamy, unifikuj postupně od začátku.<br><br>

                        Unifikace proměnné: jestli je do proměnné něco dosazené, dosaď to.
                        Zkontroluj, že dosazení můžu udělat (například ne třeba [$]x[/$] a [$]f(x)[/$]).<br>

                        Standartně z kontrolování proměnných vyjde kvadratická
                        složitost. Ale jde to i lineárně?
        -       guid: sbjGp[e3P)
                front: Forward-chaining algoritmus v FOL s Horn-klauzulemi, nevýhody
                back: |
                        Pro každou klauzuli v KB, ve které přejmenuju proměnné
                        aby byly různé od mých:
                        pokud se to dá zunifikovat s něčím co už je v KB a
                        konsekvent není přejmenování něčeho co už máme:
                        přidej to do KB. jestli odvodím hledanou věc, vrať že
                        to jde přidat.<br>

                        Problém: [$]R(x) \\longrightarrow R(S(x))[/$] odvodí nekonečně mnoho faktů
        -       guid: cp_MapU.-c
                front: Složitost pattern-matchingu při hledání, jestli je splněné
                        tělo klauzule
                back: |
                        NP-kompletní. Dá se na to převést barvení grafu:<br>
                        [$]\\mathrm{diff}(\\mathrm{red},\\mathrm{green}), \\ldots, \\mathrm{diff}(\\mathrm{Wa},\\mathrm{Nt}) \\wedge \\mathrm{diff}(\\mathrm{Nt},\\mathrm{Sf}) \\wedge \\ldots \\Rightarrow \\mathrm{Colorable}[/$]
        -       guid: J`4Y/Z90:}
                front: 3 heuristiky k pattern-matchingu v FOL
                back: |
                        <ul>
                        <li> *Indexuj podle predikátu*
                        <li>
                        [$]\\mathrm{missile}(X) \\wedge \\mathrm{owns}(\\mathrm{nono},X) \\Rightarrow \\mathrm{sells}(\\mathrm{west},X,\\mathrm{nono})[/$]
                        <br>
                        Matchovat nejdřív rakety, nebo co vlastní Nono?
                        To čeho je míň (first-fail).
                        <li> Použij při inferenci pravidlo *jenom když se od
                        jeho posledního použití našel nový fakt* unifikovatelný
                        s něčím v těle.
                        </ul>
        -       guid: Ed78^K{|uu
                topic: Rete algoritmus
                front: Na jaké formy KB se používá?
                back: Horn-SAT v FOL
        -       guid: G*K:^?l-en
                topic: Rete algoritmus
                front: Co dělá?
                back: |
                        Preprocesuj pravidla tak, abys rychleji uměl vyhledat,
                        které pravidlo znova odpálit až odvodíš nový fakt.
        -       guid: oD7-[[bN3p
                front: Backward chaining v first-order Horn-SAT - algoritmus
                back: |
                        Query: seznam konjunkci co hledame v KB.
                        Substituce: nejdriv prazdna.<br>

                        <ul>
                        <li>Nemám goaly &rarr; vrať nalezenou substituci.
                        <li>Aplikuj substituci na první cil [$]g_1[/$], a rozšiř ji.
                        <li>Najdi pravidlo, jehož hlava jde zunifikovat s [$]g_1[/$].
                        <li>Přídej mezi cíle jeho tělo, zkomponuj substituce, rekurze.
                        </ul>
        -       guid: p1oJ$XP)t$
                front: Prostorová složitost FOL-BackwardChain-ASK, kompletnost
                back: |
                        Použij DFS na vyhledání všech řešení.
                        Lineární prostor vzhledem k délce důkazu.
                        Algoritmus není úplný.
        -       guid: cE_UFs)18P
                front: Co musím přidat do first-order logické rezoluce aby byla
                        kompletní?
                back: |
                        <ul>
                        <li> Unifikace.
                        <li> Rozšířit na víc literálů.
                        <li> *Faktorizace* (na odebrání redundantních literálů
                        - tj. těch co se dají zunifikovat).
                        </ul>
                        Je pak sound & complete.
        -       guid: u^N1*DgpQZ
                front: 4 strategie pro rezoluci v FOL
                back: |
                        <ul>
                        <li> <i>Jednotková propagace</i>: preferuj pokud jde.
                        (Pro Hornovské klauzule je kompletní.)
                        <li> Podpůrná množina (<i>support set</i>): sada
                        klauzulí že jedna klauzule pro rezoluci je vždy z téhle
                        množiny a rezolvovanou klauzuli tam přidám.
                        Na začátku obsahuje jenom negovaný query.
                        <li> <i>Input resolution</i>: (nekompletní): každý
                        rezoluční krok obsahuje aspoň jednu vstupní klauzuli.
                        <li> <i>Subsumpce</i>: nepřidávej redundantní klauzule do KB
                        </ul>
