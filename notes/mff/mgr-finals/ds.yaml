deck: All::Magisterské státnice::Datové struktury
notes:
-       guid: IH7%zHfWMm
        front: Základní vlasnost binárních vyhledávacích stromů
        back: |
                V pořadí zleva doprava v DFS jsou klíče uspořádané
                od nejmenšího po největší.
-       guid: wSStw0e&LZ
        front: |
                Na jaké vlastnosti záleží doba vyhledávání ve
                vyhl. stromu? Jak to optimalizujeme?
        back: |
                Na hloubce vrcholů.
                <ul>
                <li> Systematické vyvažování: AVL/red-black/...
                <li> [$] (a,b)[/$]-stromy
                <li> "Dynamicky": splay stromy
                </ul>
-       guid: A1}hT()wR$
        front: |
                [$] (a,b)[/$]-stromy: význam [$]a[/$], [$]b[/$], invariant
                <br>
                Kde jsou hodnoty? Co je ve vnitřních uzlech?
        back: |
                [$]a\\geq 2[/$], [$]b\\geq 2a-1[/$]
                <br>
                Každý vrchol má aspoň [$]a[/$] a nejvýš [$]b[/$] synů ([$]\\in[a;b][/$])
                <br>
                Hodnoty jsou v listech. Vnitřní uzly obsahují maxima svých podstromů.
-       guid: KW:0YbdH{
        front: Kolik listů má [$] (a,b) [/$]-strom dané hloubky? Jakou má hloubku,
                podle množství listů?
        back: |
                Mezi [$]a^{d-1}[/$] a [$]b^d[/$].
                Hloubka: [$]\\log_b n \\leq d \\leq 1 + \\log_a n[/$].
-       guid: c?Rd?xl=Bt
        front: |
                [$] (a,b)[/$]-strom &mdash; Insert
        back: |
                <ol type="1">
                <li> Najdi vrchol *v*, pod který patří nový list.
                <li> Má-li *v* míň než [$]b[/$] synů, přidej pod něj.
                <li> Má-li *v* [$]b[/$] synů, rozštěp ho na 2, co má
                každý [$] (b+1)/2 [/$] synů. Rekurzivně vlož do otce.
                </ol>
-       guid: z2W):t/azI
        front: |
                [$] (a,b)[/$]-strom &mdash; Delete
        back: |
                <ol type="1">
                <li> Pokud otec mazaného listu obsahuje [$]>a[/$] synů,
                     odmaž list a je to.
                <li> Pokud otec spolu s levým nebo pravým sourozencem
                     obsahuje [$]>2a[/$] synů, jednoho přesuň a smaž
                     [$]v[/$]. Zaktualizuj informace o maximech.
                <li> Jinak otce a strýce sluč a rekurzivně pokračuj
                     nahoru.
                </ol>
-       guid: rug61fbvh2
        front: |
                [$] (a,b)[/$]-strom &mdash; Join &mdash; Postup
        back: |
                Spojí ztromy [$]T_1[/$], [$]T_2[/$], pokud [$]\\max T_1<\\min T_2[/$].<br>
                Ať je [$]T_1[/$] vyšší. Syny kořene [$]T_2[/$] přidej najednou
                k synům posledního vrcholu hladiny [$]d(T_1)-d(T_2)[/$] v
                [$]T_1[/$]. Bude mít moc synů &rarr; štěp jako při Insertu.
-       guid: h0nUH4=nh#
        front: |
                [$] (a,b)[/$]-strom &mdash; Join &mdash; Složitost
        back: |
                [$]\\O(d(T_1) - d(T_2))[/$]
-       guid: Mn1Nx_UTlb
        front: |
                [$] (a,b)[/$]-strom &mdash; Split
        back: |
                Rozdělí strom na 2: klíče [$]<k[/$], klíče [$]\\geq k[/$].<br>

                2 zásobníky: jeden pro levé stromy, druhý pro pravé.<br>
                Jako Find, rozděluj přitom na [$]T_L[/$], [$]T_k[/$],
                [$]T_P[/$], Postupně plň zásobníky, nakonec je zjoinuj tak
                aby Split trval [$]\\O(\\log n)[/$].
-       guid: O]TYMi?dnk
        front: |
                [$] (a,b)[/$]-strom &mdash; amortizovaný počet štěpení
                a splučování v sekvenci Insertů a Deletů; jaký je
                předpoklad?
        back: |
                [$]\\O(m+\\ell+\\log n)[/$] splitů na [$]m[/$] Insertů,
                [$]\\ell[/$] Deletů, takže [$]\\O(1)[/$] amortizovaně
                splitů/insertů za operaci<br>

                Předpoklad: [$]b\\geq 2a[/$]
-       guid: eC?Uo6Cz1!
        front: A-sort a jeho složitost
        back: |
                Vkládej do [$] (a,b)[/$]-stromu, pak vypiš DFS.<br>
                Drž prst na poslední vložený prvek, od něj hledej při dalším
                vkládání.<br>

                Celkový čas: [$]\\leq 2 \\sum_{i=1}^n \\log_a |{j\\leq i, x_i < x_j}| + \\O(n)[/$]<br>

                ([$]\\log[/$] je konkávní)<br>

                [$$]\\leq 2n \\log_a \\frac{\\sum_i |{j\\leq i, x_i < x_j}|}{n} = \\O(n\\log(F/n))[/$$]

                [$]F[/$]: počet "inverzí"<br>

                Alternativně: hledání od nejpravějšího listu [$]\\rightarrow \\leq 1 + \\log_a |\\{j < i+1, x_j > x_i\\}|[/$]
-       guid: LqID?6_`&;
        front: Red-black trees &mdash; axiomy
        back: |
                <ul>
                <li> Uzel je červený nebo černý.
                <li> Červené mohou být syny pouze černých (nemůže být
                červený pod červeným).
                <li> Každá cesta do listu má stejně černých vrcholů.
                <li> Hodnoty ve vnitřních vrcholech.
                </ul>
-       guid: e[+p(?u9?;
        front: Red-black trees &mdash; ekvivalence s [$] (a,b) [/$]
        back: |
                Ekvivalentní [$] (2,4) [/$]-stromům.
                3 možnosti:
                <ul>
                <li> Vrchol je červený, má 2 černé syny
                <li> Černý, má 2 červené syny
                <li> Černý, má 1 červeného syna.
                </ul>
                To jsou gadgety na 4, 2, 3 syny.
-       guid: ApA1!WhMzH
        front: Preventativní půjčování a štěpení
        back: |
                Při insertu preventativně štěp všechno co má [$]b[/$] synů.
                Při deletu při hledání od kořene uprav každý vrchol s [$]a[/$]
                syny buď přidáním syna ze sourozence nebo slitím se sourozencem.
-       guid: bEAlOW-sAc
        front: Vlastnosti splay stromu - maximální, amortizovaná cena vkládání
        back: |
                Na operaci: až [$]\\O(n)[/$]
                <br><br>
                Cena za [$]m[/$] operací, [$]n[/$] vložených prvků: [$]\\O(m\\log n+n\\log n)[/$]
-       guid: q*59tD<1}C
        topic: Splay stromy
        front: Operace Splay &mdash; případy pro [$]Splay(x)[/$]
        back: |
                A:
                <pre>
                       z              x
                      / \            / \
                     y   .          .   y
                    / \        ==>     / \
                   x   .              .   z
                  / \                    / \
                 .   .                  .   .
                </pre>

                B:
                <pre>
                       z                   x
                      / \                /  \
                     y   .              y    z
                    / \        ==>     / \  / \
                   .   x              .   ..   .
                      / \
                     .   .
                </pre>

                C: (u kořene)
                <pre>
                     y                     x
                    / \                   / \
                   x   .     ==>         .   y
                  / \                       / \
                 .   .                     .   .
                </pre>
-       guid: u2N4#zgEOJ
        topic: Splay stromy
        front: Insert
        back: |
                Vysplayuj nahoru poslední vrchol na cestě k chybějícímu
                [$]x[/$].
                <br><br>
                Podrozděl levou/pravou hranu z vysplayovaného kořene
                novým vrcholem [$]x[/$].
-       guid: O6X@Hlzyd]
        topic: Splay stromy
        front: Delete
        back: |
                Vysplayuj nahoru vrchol co chci odebrat.
                Odeber ho, nahraď nejmenším/největším
                pravého/levého podstromu.
-       guid: O@Q+74Fmjq
        topic: Splay stromy
        front: |
                Amortizovaný čas na Splay &mdash; definice - skutečný
                čas a potenciál před a po operaci
        back: |
                [$]t = a + \\Phi(T') - \\Phi(T)[/$]
-       guid: eDf5v}}NmP
        front: Značení - Potenciál
        back: |
                [$]\\Phi[/$]
-       guid: rps~jm$(MZ
        front: |
                Značení: Amortizovaný čas
        back: |
                [$]t[/$]
-       guid: s&VVe!_&xs
        front: |
                Značení: Skutečný čas
        back: |
                [$]a[/$]
-       guid: P9MxD(rZ>`
        topic: Splay stromy
        front: Definice potenciálu
        back: |
                [$$]\\Phi(t) \\equiv \\sum_{x\\in T}r(x); r(x) \\equiv
                \\log_2(\\text{počet vrcholů pod}\\ x)[/$$]
-       guid: qG<;0:)E8y
        topic: Splay stromy
        front: |
                Teleskopická suma porovnávající amortizovaný a skutečný
                čas
        back: |
                Pro amortizovaný čas:
                [$$]\\sum_i t_i = (\\sum_i a_i) + \\Phi(T_m)-\\Phi(T_0)[/$$]<br>

                Pro skutečný čas:
                [$$]\\sum_{i=1}^m a_i = \\sum_{i=1}^m t_i + \\Phi(T_0) - \\Phi(T_m) \\leq \\sum_{i=1}^m t_i + \\Phi(T_0)[/$$]
-       guid: u|g_$+cpM=
        topic: Splay stromy
        front: Co chci dokázat o času na jeden dvourotační krok?
        back: |
                Že jeho amortizovaný čas (tedy změna plus skutečný čas
                [$]\\Phi(T')-\\Phi(T)[/$]) je:<br>
                Pro rotace vevnitř (případ
                [$]x\\rightarrow y\\rightarrow z[/$],
                [$]x\\leftarrow y\\rightarrow z[/$]):
                [$]t\\leq 3(r'(x)-r(x))[/$].
                Pro rotaci u kořene: [$]t\\leq 3(r'(x)-r(x)) + 1[/$].
-       guid: rj>3)Gf_It
        topic: Splay stromy
        front: |
                K čemu je omezení na amortizovaný čas na dvourotační
                kroky?
        back: |
                Na krok je čas [$]\\leq 3(r'(x)-r(x))[/$], [$]+1[/$]
                za rotaci u kořene.<br>
                Postupným splayováním vyteleskopuje na
                [$]1+3(r(v)-r(x))[/$], kde [$]v[/$] je kořen.<br>
                To je [$]\\Theta(\\log N)[/$].
-       guid: lydVM0+BZl
        topic: Splay stromy
        markdown: false
        front: |
                Amortizovaný čas na Splay &mdash; na případ
                [$]z\searrow y\searrow x \Longrightarrow z\swarrow
                y\swarrow x[/$]
        back: |
                [latex]
                \begin{align*}
                   t \\equiv & a+\Phi(T')-\Phi(T) = &
                \\         = & \underbrace{2}_{\text{rotace}} + r'(x) - r(x) + r'(y) - r(y) + r'(z) - r(z) = & [r(z)=r'(x)]
                \\         = & 2 - r(x) + r'(y) - r(y) + r'(z) \leq & [r'(y) \leq r'(x); r(y)\geq r(x)]
                \\      \leq & 2 - r(x) + r'(x) - r(x) + r'(z) &
                \\         = & 2 + r'(x) - 2r(x) + r'(z) &
                \end{align*}
                [/latex]
                <br>
                Pozorování: [$]2 \leq 2r'(x) - r(x) - r'(z)[/$]<br>
                Tedy: [$$]t\leq 2+r'(x)-2r(x)+r'(z) \leq 3r'(x)-3r(x)[/$$]
-       guid: B=hm8=l4+k
        topic: Splay stromy
        markdown: false
        front: |
                Amortizovaný čas na Splay &mdash; na případ
                [$]z\searrow y\swarrow x \Longrightarrow z\nearrow
                x\nwarrow y[/$]
        back: |
                [latex]
                \begin{align*}
                   t \\equiv & a+\Phi(T')-\Phi(T) = &
                \\         = & \underbrace{2}_{\text{rotace}} + r'(x) - r(x) + r'(y) - r(y) + r'(z) - r(z) = & [r(z)=r'(x)]
                \\         = & 2 - r(x) + r'(y) - r(y) + r'(z) \leq & [r(y) > r(x)]
                \\      \leq & 2 - 2r(x) + r'(y) - r'(z) &
                \end{align*}
                [/latex]
                <br>

                Pozorování: [$]2\\leq 2r'(x)-r'(y)-r'(z)[/$]<br>

                Tedy: [$$]t \\leq 2r'(x)-2r(x)=2(r'(x)-r(x))\\leq 3(r'(x)-r(x))[/$$]
-       guid: HJ;abX.u!|
        topic: Splay stromy
        front: |
                Amortizovaný čas na Splay &mdash; na případ
                [$]x\\rightarrow y[/$] v kořeni
        back: |
                [$]t\\leq 1+r'(x)-r(x)+r'(y)-r(y)[/$]
                <br><br>
                Pozorování: [$]r'(y)<r(y)[/$], [$]r'(x)-r(x)>0[/$]
                <br><br>
                [$]t \\leq 1+r'(x)-r(x) \\leq 1+3(r'(x)-r(x))[/$]
-       guid: s0C.zqQ3CE
        front: Haldy &mdash; obecný interface
        back: |
                Insert, Min, DeleteMin
-       guid: izk?Fj~j(c
        topic: Regulární halda
        front: Invariant
        back: |
                Prvek je menší než všechny pod ním.
-       guid: ON4_m/hNf/
        topic: Regulární halda
        front: Uložení do pole
        back: |
                Pod [$]i[/$] jsou prvky [$]2i[/$], [$]2i+1[/$].
-       guid: xexLSVJ/pS
        topic: Regulární halda
        front: Algoritmus Insert
        back: |
                Přidej na konec pole. Bublej směrem ke kořeni,
                dokud je porušena podmínka, že otec je menší než syn.
-       guid: AjqH(hqpho
        topic: Regulární halda
        front: Algoritmus Delete
        back: |
                Poslední přesuň do prvního, bublej s menším ze
                synů směrem dolů dokud je otec větší než syn.
-       guid: 'j|t?JR~]Z:'
        topic: Regulární halda
        front: Časy
        back: |
                Insert, DeleteMin: [$]\\O(\\log n)[/$], Min: [$]\\O(1)[/$]
-       guid: yqZuC2m1ER
        topic: Binomiální halda
        front: Struktura
        back: |
                Soubor haldově uspořádaných stromů velikostí [$]2^k[/$].
                Pointer na strom s minimem.
                <br><br>
                *Zbrklá*: nejvýše jeden strom dané varianty.
                <br><br>
                *Líná*: bez omezení na počet stromů stejné velikosti.
                <br><br>
                Jeden binomiální strom obsahuje kořen a hned pod ním
                menší binomiální stromy všech menších velikostí.
-       guid: BFq)2ucQiA
        topic: Eager binomiální halda
        front: Algoritmus Insert
        back: |
                Přidej strom velikosti 1, slívej dokud existují stejné
                velikosti.
                Aktualizuj ukazatel na strom s minimem.
-       guid: EU3RZ%3}D*
        topic: Eager binomiální halda
        front: Algoritmus DeleteMin
        back: |
                Odřízneme kořen stromu s minimem.
                Rozpadne se na [$]i[/$] stromů velikosti [$]2^0, 2^1,
                \\ldots 2^{i-1}[/$].
                Postupně slívej jako při Insertu.
-       guid: j[z$~|$_%;
        topic: Eager binomiální halda
        front: Složitosti
        back: |
                Insert [$]\\O(\\log n)[/$], Min [$]\\O(1)[/$],
                DeleteMin [$]\\O(\\log n)[/$].
                <br><br>
                Ale [$]n[/$] insertů trvá jenom [$]\\O(n)[/$]
                (amortizací přes inkrement).
                <br><br>
                (Amortizovaně [$]\\O(1)[/$] na Insert dokud se
                neprovede DeleteMin.)
-       guid: .arg,<)A_
        topic: Líná binomiální halda
        front: Algoritmus Insert
        back: |
                Vytvoř nový strom velikosti 1,
                aktualizuj odkaz na minimum.
-       guid: B{9>rH1V/@
        topic: Líná binomiální halda
        front: Algoritmus DeleteMin
        back: |
                Odřízni kořen stromu s minimem.
                Slévej stromy stejné velikosti dokud to jde.
-       guid: xHQpWWLl6h
        topic: Líná binomiální halda
        front: Složitosti, důkazy
        back: |
                Insert [$]\\O(1)[/$], Min [$]\\O(1)[/$],
                DeleteMin [$]\\O(n)[/$],
                ale amortizovaně [$]\\O(\\log n)[/$]<br><br>

                Potenciál: [$]\\Phi(T) = C \\cdot [/$] počet stromů v haldě<br>

                Insert: [$]\\leq C + \\Phi(T')-\\Phi(T) = C[/$]<br>

                DeleteMin: [$]\\leq C \\cdot [/$] počet stromů [$]+\\Phi(T')-\\Phi(T)\\leq C\\cdot\\log n = \\O(\\log n)[/$]
-       guid: 'iTW:Ey!a@:'
        front: |
                Značení: velikost cache v modelu externí paměti
        back: |
                [$]M[/$]
-       guid: AH##M0,Bfl
        front: |
                Značení: velikost bloku v modelu externí paměti
        back: |
                [$]B[/$]
-       guid: NqFwS-t7PO
        front: Model externí paměti &mdash; notace
        back: |
                [$]M[/$]: velikost paměti<br>

                [$]B[/$]: velikost přenášených bloků<br>

                [$]M/B[/$]: počet bloků v paměti
-       guid: vuX_-37r0V
        topic: Model externí paměti
        front: Složitost sekvenčního čtení
        back: |
                [$]\\lceil N/B \\rceil + 1[/$]
-       guid: H[pzlvps}f
        topic: Model externí paměti
        front: Složitost binárního vyhledávání
        back: |
                [$]\\log N - \\log B[/$]
-       guid: z{@tQ+]R>y
        front: |
                Model externí paměti &mdash; transpozice matice, za
                jaké podmínky to funguje. Co naivní algoritmus?
        back: |
                Když [$]M>B^2[/$], jde udělat algoritmus s [$]N^2/B[/$] přenosy (optimální).
                Transponuj po podmaticích velikosti [$]B\\times B[/$].<br>
                Naivní algoritmus chce [$]N^2[/$] přenosů (pokud [$]\\frac{M}{B}<N[/$]).
-       guid: kY7MpPVOCF
        front: Cache-oblivious algoritmy
        back: |
                Algoritmus je navržený bez známého [$]M[/$], [$]B[/$].
                Analyzujeme s tím, že to jsou neznámé.
-       guid: kJ=W{F3A5*
        front: |
                Transpozice matice cache-obliviously.
                Jaký má předpoklad? Jakou má složitost?
        back: |
                Rekurzivně po čtvrtinách.
                Předpoklad: [$]M\\geq B^2[/$] (tall cache assumption)
                <br><br>
                Jakmile se dostanu na velikost [$]B\\times B[/$],
                tak jedna transpozice trvá [$]B[/$] přenosů.
                Takových matic je [$]N^2/B^2[/$].
                [$]\\O(N^2/B^2 \\cdot B)=\\O(N^2/B)[/$] I/O operací.
-       guid: Hj<]lx*KAq
        front: Van Emde-Boasovo uspořádání
        back: |
                Useknu strom v půlce výšky.
                Nahoře je [$]\\sqrt{N}[/$] prvků,
                dole je [$]\\sqrt{N}[/$] stromů, každý velký
                [$]\\sqrt{N}[/$]. Uložím je za sebe.
                Počet I/O operací: [$]\\frac{\\log n}{\\log \\sqrt{B}}=2\\log_B N[/$]
                <br><br>
                Zlepšení proti binárnímu vyhledávání
                ([$]\\log N - \\log B[/$]).
-       guid: b2G,6ZCI%5
        front: Třídení &mdash; optimální cache-oblivious složitosti
        back: |
                Za předpokladu [$]M\\geq B^2[/$] jde
                [$]\\O(n\\log n)[/$] operací,
                [$]\\O(N/B \\log_{M/B}[N/B])[/$] I/O
-       guid: zM(9)Lyud
        front: Ideální vs. skutečná cache
        back: |
                Skutečná: asociativita (není plně asociativní),
                nevidí budoucnost (má LRU).
-       guid: lxV=G`FM<w
        front: Sleator-Tarjanova věta o LRU/OPT strategii - znění
        markdown: false
        back: |
                [$]f_{\mathrm{LRU}} \leq
                \frac{n_{LRU}}{n_{LRU}-n_{OPT}}\cdot
                f_{\mathrm{OPT}}+n_{\mathrm{LRU}}[/$]
                <br>
                Když zvolím 2x větší LRU, bude konstanta nejvýš 2.
-       guid: z[syrn+Hsf
        front: Sleator-Tarjanova věta o LRU/OPT strategii - důkaz
        markdown: false
        back: |
                LRU má v časech [$]t_1, t_2[/$] výpadek stejné
                stránky &rarr; mezi [$]t_1[/$] a [$]t_2[/$] přistupuje
                k [$]n_{\mathrm{LRU}}[/$] různým stránkám.
                <br><br>
                Rozsekej přístupy na kusy, v každém
                [$]n_{\mathrm{LRU}}[/$] výpadků v LRU (až na poslední).
                V každém se přistupuje k [$]\\geq n_{\mathrm{LRU}}[/$]
                různým stránkám. OPT má v úseku
                [$]\\geq n_{\mathrm{LRU}}-n_{\mathrm{OPT}}[/$] výpadků,
                protože na začátku drží
                [$]\\leq n_{\mathrm{OPT}}[/$] stránek.
                <br><br>
                Tedy: [$]f_{\mathrm{LRU}}/n_{\mathrm{LRU}} \leq \lceil
                f_{\mathrm{OPT}} / (n_{\mathrm{LRU}}-n_{\mathrm{OPT}})
                \rceil[/$]<br>

                Když zvolím 2x větší LRU, bude konstanta nejvýš 2.
-       guid: b%M<QTX}T&
        topic: Hashování
        front: Jaký problém řeší, a obecně jak?
        back: |
                Velké univerzum [$]U[/$], reprezentuju
                [$]S\\subseteq U[/$], [$]|S|=n[/$],
                operace Find, Insert, (Delete).
                <br>
                Triviálně: použít pole velikosti [$]|U|[/$].
                <br>
                Vybereme [$]h:U\\imp\\{1\\ldots m\\}[/$],
                kde [$]m \\ll |U|[/$].
-       guid: yt1:@GiU}K
        topic: Hashování
        front: 5 způsobů řešení kolizí &mdash; jen názvy
        back: |
                <ul>
                <li> Separované řetězce
                <li> Srůstající řetězce
                <li> S pomocným polem
                <li> Lineární přidávání
                <li> Dvojité hashování
                </ul>
-       guid: LZeS4a}:-e
        topic: Hashování
        front: Řešení kolizí přes separované řetězce
        back: |
                V každém kyblíku vyhledávací strom
        include_reverse: true
-       guid: kj,~:f7z0^
        topic: Hashování
        front: Srůstající řetězce (a 2 podzpůsoby)
        back: |
                Každý kyblík má 1 prvek a volitelně ukazatel, tvoří jednosměrný
                spoják.
                Přidám nový prvek &rarr; přidám na konec seznamu (LICH),
                nebo za první prvek (EICH).
        include_reverse: true
-       guid: E%NSI@16[>
        topic: Hashování
        front: S pomocným polem
        back: |
                V kyblíku místo na prvek a ukazatel.
                Ukazatele ukazují do pomocného pole, které může
                ukazovat dál.
                Dojde pomocné pole &rarr; začnu ukládat přetékající
                prvky do hlavního pole.
-       guid: dqfSP,@~Ah
        topic: Hashování
        front: Jak funguje lineární přidávání
        back: Prvek vkládám na nejbližší volnou pozici za jeho kyblík.
        include_reverse: true
-       guid: h?O|6J!HTo
        topic: Hashování
        front: Dvojité hashování
        back: Zkouším postupně pozice [$]h_1(x)+i\\cdot h_2(x)[/$]
-       guid: g1E1C4A$5P
        topic: Hashování
        front: Co vyžaduje dvojité hashování?
        back: |
                Když je [$]m[/$] kyblíků a pozice se počítá
                [$]h_1(x)+i\\cdot h_2(x)[/$], je potřeba aby [$]h_2(x)[/$]
                bylo nesoudělné s [$]m[/$] (to platí např. když
                [$]m\\in P[/$] a [$]h_2(x)\\in\\{1,\\ldots m-1\\}[/$].
-       guid: p8~)Nu_zan
        topic: Hashování
        front: Jak dělat Delete?
        back: |
                Je problematický.<br>
                Trik: označit smazané prvky a při Insert
                recyklovat. Pokud bude příliš mnoho označených,
                přehashuju.
-       guid: t_y2G?.9?*
        topic: Hashování
        front: Balls & bins - pravděpodobnost, že koš je prázdný
        back: |
                [$]n[/$] košů a [$]n[/$] míčků, které házím náhodně.
                <br>
                [$$]P[\\text{kos je prazdny}]=
                \\left(1-\\frac{1}{n}\\right)^n\\rightarrow_{n\\rightarrow\\infty} \\frac{1}{e}[/$$]
-       guid: '}<!Vi>n{N'
        topic: Hashování
        front: Balls & bins - pravděpodobnost, že koš obsahuje [$]k[/$] míčků
        back: |
                [$$]P[\\text{kos ma}\\ n\\ \\text{micku}]=
                {n\\choose k} \\frac{1}{n^k} \\left(1-\\frac{1}{n}\\right)^{n-k} \\approx_{k\\ll n} \\frac{n^k}{k!} \\cdot \\frac{1}{n^k} \\cdot \\frac{1}{e} = \\frac{1}{e \\cdot k!}[/$$]
-       guid: H9RFA{,aYE
        topic: Hashování
        front: Balls & bins - jaké je maximum v libovolném košíku?
        back: |
                S velkou pravděpodobností
                [$]\\Theta(\\log n/\\log \\log n)[/$].
                <br>
                [$]n! < n^n[/$]. Vezmi [$]x=\\log n/\\log\\log n[/$].
                [$]x^x < n[/$], pokud [$]x \\log x < \\log n[/$].<br>
                [$$] (x \\log x) = (\\frac{\\log n}{\\log\\log n})\\log(\\frac{\\log n}{\\log\\log n}) < \\log x[/$$]<br>
                <br>
                Pravděpodobnost, že v jednom koši je [$]k[/$] míčků, je [$]\\Theta(\\frac{1}{k!})[/$],
                pravděpodobnost, že v jednom koši je [$]\\geq k[/$], je [$]\\Theta(\\frac{1}{k!})[/$].
                <br>
                Pravděpodobnost, že v žádném koši není [$]\\geq k[/$], je [$]\\geq n/k![/$],
                takže pro [$]k=\\Theta(\\log n/\\log\\log n)[/$] je to
                konstantní pravděpodobnost.
-       guid: <YzAdPh[R
        topic: Hashování
        front: Proč nás zajímá balls & bins?
        back: |
                Říká že při náhodné hashovací funkci bude maximální
                velikost kyblíku [$]\\Theta(\\log n/\\log\\log n)[/$].
-       guid: D(V{5VZjfK
        topic: Hashování
        front: Analýza lineárního přidávání
        markdown: false
        back: |
                Ať [$]h[/$] přiděluje prvky náhodně.
                <br>
                [$]p_{k,s}[/$]: pravděpodobnost, že nejbližší volná
                pozice je po [$]k[/$] prvcích
                a před [$]h(x)[/$] je dalších [$]s[/$] prvků.
                <br>
                [latex]
                \begin{align*}
                p_{k,s} & = & {n\choose {k+s}} \cdot \left(\frac{k+s}{m}\right)^{k+s} \leq &
                \\      & \leq & \frac{n^{k+s}}{(k+s)!} \cdot \frac{(k+s)^{k+s}}{m^{k+s}} = &
                \\      & = & \frac{n^{k+s}}{m^{k+s}}\cdot\frac{(k+s)^{k+s}}{(k+s)!} = & \text{Stirling:} a!\approx \sqrt{2\pi a}(a/e)^a
                \\      & = & (n/m)^{k+s} \cdot \frac{1}{\sqrt{k+s}} \cdot e^{k+s} \cdot \frac{1}{\sqrt{2\pi}} &
                \end{align*}
                [/latex]
                <br>
                Zvolím [$]m\geq 3n[/$], protože [$]e\approx 2.718\ldots[/$].
                <br>
                [$$]\ldots (e/3)^{k+s} \cdot \frac{1}{\sqrt{(k+s)2\pi}}[/$$]
                <br>
                Očekávaná doba vkládání:
                [$$]\leq \sum_{k\geq 1}k\cdot Pr[\text{hledani potrva cas}\ k]\leq\sum_{k\geq 1} k\cdot\underbrace{\sum_{s\geq 0} (e/3)^{k+s} \cdot \frac{1}{\sqrt{(k+s)2\pi}}}_{\leq \mathcal{O}((e/3)^k)} = \mathcal{O}(1)[/$$]
-       guid: u_^FSXc4-o
        topic: Hashování
        front: |
                Očekávané maximální zaplnění koše při balls & bins,
                když zvolím náhodně 2 koše a přidám do
                prázdnějšího
        back: |
                [$]\\mathcal{O}(\\log\\log n)[/$]
-       guid: tL{JDd<cBk
        topic: Kukaččí hashování
        front: Jak funguje?
        back: |
                2 hashovací funkce,
                [$]x[/$] je buď v [$]h_1(x)[/$], nebo [$]h_2(x)[/$].
                <br>
                Insert:
                [$]pos\\leftarrow h_1(x)[/$].
                Opakuj [$]n[/$]-krát: pokud je kyblík [$]pos[/$]
                zaplněný, vyměň [$]x[/$] a [$]T[pos][/$],
                vyber [$]x[/$] jako druhý hash.
                Jestli to doběhne a furt držíš prvek, přehashuj.
-       guid: Qyj(+CBUKt
        topic: Kukaččí hashování
        front: Pro jaké [$]m[/$] funguje dobře?
        back: |
                [$]m\\approx 2.3n[/$],
                ale analýzu ukážu pro [$]m=6n[/$].
-       guid: =nH8cW(q)
        topic: Kukaččí hashování
        front: Důkaz očekávaného počtu přehašování za Inserty
        markdown: false
        back: |
                [$]m=6n[/$].
                <br>
                Tvrzení: Pravděpodobnost, že pro náhodné [$]h_1,h_2[/$]
                má kukačkový graf cyklus, je [$]\leq 1/2[/$].
                <br>
                Lemma: Pravděpodobnost, že pro náhodné [$]h_1,h_2[/$]
                jsou pozice [$]i,j[/$] spojeny cestou délky [$]\ell[/$]
                je
                [$]\leq (2n/m)^\ell \cdot \frac{1}{m} \leq \frac{1}{3^\ell}\cdot\frac{1}{m}[/$].
                <br>
                Důkaz lemmatu:<br>
                [latex]
                \begin{align*}
                P[d(i,j)=l] & \leq & P[\e x_{1,\ldots \ell}, i_{1,\ldots \ell-1}:
                        h(x_1)=\{i,i_1\} \wedge \ldots h(x_\ell)=\{i_{\ell-1},j\\}] \leq \\
                            & \leq & \underbrace{2^\ell}_{\text{parita}} \cdot n \cdot (n-1) \cdot \ldots \cdot (n-\ell+1) \cdot m^{l-1} \cdot m^{2(n-\ell)} / m^{2n} \leq \\
                            & \leq & \frac{2^\ell}{m^{2\ell}} \cdot n^\ell \cdot m^{\ell-1} = \\left(\frac{2n}{m}\\right)^\ell \cdot \frac{1}{m}
                \end{align*}
                [/latex]
                <br>
                Důkaz tvrzení:
                <br>
                [$$]P[i\text{ je v cyklu delky }\ell]\leq\frac{1}{3^\ell}\frac{1}{m}[/$$]<br>
                [$$]P[i\text{ je v cyklu}]\leq\sum_{\ell\geq 1}\frac{1}{3^\ell}\cdot\frac{1}{m}\leq\frac{1}{2m}[/$$]<br>
                [$$]P[\e\text{ cyklus}]\leq\frac{1}{2}[/$$]
                <br>
                Očekávaný počet přehashování je tedy [$]\leq 1[/$] na
                [$]n[/$] insertů.
-       guid: QJ!!_;T[T<
        topic: Kukaččí hashování
        front: Důkaz konstantního času na Insert
        markdown: false
        back: |
                (Za předpokladu, že není cyklus.)
                <br>
                Očekávaná doba:
                [$$]\leq \sum_{\ell\geq 1}\ell\cdot P[\text{z}\ i\ \text{vede cesta delky}\ell]\leq\sum_{\ell\geq 1}\ell\cdot(\frac{1}{3^\ell}\cdot\frac{1}{m})\cdot m\leq O(1)[/$$]
-       guid: s!bjR`_:`]
        topic: Kukaččí hashování
        front: Rychlejší zaříznutí Insertu
        back: |
                Jakmile mám třeba [$]2\\log n[/$] kroků, začnu už
                přehashovávat (tak dlouhá cesta je nepravděpodobná).
-       guid: yw=,/k,~|_
        front: Proč chceme vybírat hashovací funkci netriviálně?
        back: |
                Protože data nejsou většinou uniformní a nezávislá.
                Kdyby byly distribuovány uniformně nezávisle, libovolná
                funkce co by mapovala do stejně velkých bucketů by
                fungovala dobře.
-       guid: c$~{8~=ZNQ
        front: Proč nevybereme náhodnou hashovací funkci?
        back: |
                Moc dlouhý popis ([$]|U|\\cdot\\log m[/$])
-       guid: i&/Q+OPI$l
        front: Co je to univerzální hashovací systém?
        back: |
                [$]\a x\neq y: \mathrm{P}_{h\in H}[h(x)=h(y)]=\frac{1}{m}[/$]
                <br>
                Neboli: kolize dvou prvků stejně pravděpodobná jako u náhodné
                funkce.
-       guid: f4s8D3J*ZJ
        front: |
                Definice: [$]k[/$]-univerzální hashovací systém
                (po [$]k[/$] nezávislá hashovací funkce)
        markdown: false
        back: |
                [$]\a (x_{1\ldots k}\in U, a_{1\ldots k}\in [m]):
                \mathrm{P}_{h\in H}[h(x_1)=a_1,\ldots h(x_k)=a_k]=\frac{1}{m^k}[/$]
-       guid: M)MHHi/%6`
        front: |
                5 příkladů: 2-univerzální hashovací systémy
        markdown: false
        back: |
                <ul>
                <li> [$] (ax+b)\bmod m[/$]
                <li> Maticové násobení
                <li> Konvoluce
                <li> Multiply-shift
                <li> Vektory
                </ul>

-       guid: e}wl5so5HN
        front: Hashování [$] (ax+b)\\bmod m[/$] a vlastnosti
        back: |
                [$]m[/$] prvočíslo, [$]H=\\{h_{a,b}:a,b\in [m]\\}[/$],
                [$]h_{a,b}(x)=(ax+b) \\bmod m[/$]<br>
                Potřebuje dělení. Je 2-univerzální.
-       guid: r!$uiPb%GN
        front: Hashování násobením matic a vlastnosti
        back: |
                [$]h:\\{0,1\\}^w\\rightarrow\\{0,1\\}^k[/$],
                [$]H=\\{h_{A,b}, A\\in\\{0,1\\}^{k\\times w},b\\in\\{0,1\\}^k\\}[/$],
                [$]h_{A,b}(x)=Ax+b[/$], kde maticové násobení je nad [$]GF(2)[/$],
                popis potřebuje [$]k\\cdot W+k[/$] bitů
                <br>
                Nepraktické. 2-univerzální.
-       guid: hlmi_il[sp
        front: Hashování konvolucí a vlastnosti
        markdown: false
        back: |
                [$]w,k\in \N, h:\{0,1\}^w\rightarrow\{0,1\}^k[/$],
                [$]H=\{h_{a,b}:a\in\{0,1\}^{w+k-1},b\in\{0,1\}^b\}[/$].
                [$] (h_{a,b}(x))_j=b_j+\sum_{i=1}^w a_{i+j-1} x_i[/$]
                <br>
                Nepraktické. 2-univerzální.
-       guid: u.7{2(Y|k_
        front: Hashování multiply-shift a vlastnosti
        markdown: false
        back: |
                [$]h:\{0,1\}^w\rightarrow\{0,1\}^k[/$],
                [$]a,b\in\{0,1\}^{w+k-1}[/$]<br>
                [$$]h_{a,b}(x)=[(ax+b)\gg w-1)]_{1\ldots k}[/$$]
                &mdash; vyber nejnižší bity
                (+,* nad celými čísly)
                <br>
                <br>
                Rychlé, nepotřebuje dělení, stačí jedno násobení.
                2-univerzální.
                <br>
                Zobecnění: [$][ax+b]_{w'-k+1,\ldots w'}[/$]
-       guid: raEA_1d9Lc
        front: Hashování vektory
        markdown: false
        back: |
                [$]h:\{0,1\}^{w\times d}\rightarrow\{0,1\}^k[/$], kde [$]w'\geq w+k-1[/$].
                <br>
                [$$]H=\{h_{a_{0,1,\ldots d-1},b}: a_{0,\ldots d-1},b\in\{0,1\}^{w}\}[/$$]
                <br>
                [$$]h(x_0,\ldots x_{d-1})=[(\sum a_i x_i) + b]_{w-k+1,\ldots w'}[/$$]
                (výběr bitů)
-       guid: jYPj7-N_;J
        front: Hashování vektory - vychytávky
        markdown: false
        back: |
                [$]d[/$] je sudé &rarr; jde ušetřit násobení:
                [$$]h(x_{0\ldots d-1})=\left[\left(\sum_{i\in\{0,\ldots d/2-1\}} (a_{2i}+x_{2i+1})(a_{2i+1}+x_{2i})\right) + b\right][/$$]
                <br>
                Hashuju vektory proměnné délky [$]d'<d[/$], kde [$]d'[/$] je sudé &rarr;
                [$$]h(x_{0\ldots d'-1})=\left[\left(\sum_{i\in\{0,\ldots d'/2-1\}} (a_{2i}+x_{2i+1})(a_{2i+1}+x_{2i})\right) + a_{d'}\right]_{w'-k+1,\ldots w'}[/$$]
-       guid: yj`2,[@g~C
        front: Hashování řetězců - parametry
        back: |
                [$]p\\in P (p\\geq |U|)[/$],
                [$]a\\in\\{0,\\ldots p-1\\}[/$].
                <br>
                Vstup: [$]x_0,\\ldots x_{d-1}\\in U[/$].
-       guid: GD)4:Gprdp
        front: Hashování řetězců - pravděpodobnost kolize a důkaz
        back: |
                [$$]h_a(x_0,\\ldots x_{d-1})=\\sum_{i=0}^{d-1}x_i\\cdot a^i \\bmod p[/$$]
                <br>
                Věta: když [$]\\overline{x}\\neq\\overline{y}[/$] stejné délky,
                tak [$]P_a[h_a(\\overline{x})=h_a(\\overline{y})]\\leq d/p[/$].
                <br>
                Důkaz: 2 různé polynomy stupně [$]\\leq d-1[/$] se mohou shodovat
                nejvýše v [$]d[/$] bodech.
-       guid: oPRO~&NLYw
        front: Hashování řetězců - spojení co dá malou pravděpodobnost kolize
        back: |
                [$]h_a[/$] jde složit s hašovací funkcí [$]\\{0,\\ldots p-1\\}\\rightarrow\\{0,\\ldots m-1\\}[/$]:
                [$$]h_{a,b,c\\in\\{0,\\ldots p-1\\}} = ((a(\\sum_{i=0}^{d-1} x_i c^i)+b)\\bmod p)\\bmod m[/$$]
                <br>
                Pokud [$]d<p/m[/$], tak je pst. kolize [$]\\leq 2/m[/$].
-       guid: tYu!}ULqT,
        front: Tabulkové hashování a jeho vlastnosti
        back: |
                Zvolím [$]x_0,\\ldots x_{d-1}\\in [m][/$],
                náhodné tabulky [$]T_0,\\ldots T_{d-1}: [m]\\rightarrow\\{0,1\\}^\\ell[/$],
                výstup je [$]T_0[x_0]\\oplus \\ldots T_{d-1}[x_{d-1}][/$].
                <br>
                2-univerzální.
-       guid: lAJYeQ,UXg
        front: 5-univerzální tabulkové hashování
        back: |
                [$]x_0,x_1\\in [m][/$],
                náhodné tabulky [$]T_0,T_1: [m]\\rightarrow\\{0,1\\}^\\ell[/$],
                [$]T_2:[2m]\\rightarrow\\{0,1\\}^\\ell[/$].<br>
                Výsledek: [$]T_0[x_0]\\oplus T_1[x_1]\\oplus T_2[x_0 || x_1][/$]
-       guid: GB!@#{zA==
        front: Konstrukce [$]k[/$]-univerzálního hashování
        back: |
                [$]p\\in P, x\\in \\Z_p,
                a_0,\\ldots a_{k-1}\\in \\Z_p[/$] náhodně<br>
                <br>
                [$]h_{a_0,\\ldots a_{k-1}}(x)=\\sum_{i=0}^{k-1} a_i x^i \\bmod p[/$]
                <br>
                [$]k[/$]-univerzální.
-       guid: lpSCQXCKWB
        front: Užitečnost Mersennových prvočísel
        back: |
                Dá se jimi rychle modulit:
                [$]y=(y \\& p) + (y \\gg a)(\\bmod p)[/$]
-       guid: uqrpzi^&/=
        front: Perfektní hashování
        back: |
                Vem 2-univerzální hashovací systém.
                [$]P_{h\\in H}[h(x_1)=h(x_2)]=1/m[/$].
                <br><br>
                Očekávaný počet kolidujících dvojic:
                [$]\\leq n^2\\cdot\\frac{1}{m}[/$]
                <br><br>
                Když [$]m\\geq 2n^2[/$], pak
                [$]P[h\\ \\text{perfektní na}\\ S]\\geq\\frac{1}{2}[/$].

